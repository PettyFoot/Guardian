{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  driver: \"pg\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n\n\n\n\n","size_bytes":345},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Email Guardian\n\n## Overview\n\nEmail Guardian is a full-stack web application that filters emails through a donation-based gating system. The application connects to users' Gmail accounts and automatically filters emails from unknown senders by requiring a small donation payment before allowing the email to reach the user's inbox. Known contacts are whitelisted and their emails pass through directly.\n\nThe system uses React for the frontend with shadcn/ui components, Express.js for the backend API, Drizzle ORM with PostgreSQL for data persistence, Gmail API for email management, and Stripe for payment processing.\n\n## Current Status (August 2025)\n\n‚úÖ **Completed Infrastructure:**\n- Full-stack application architecture with TypeScript\n- PostgreSQL database with Drizzle ORM schema\n- React frontend with shadcn/ui components and Tailwind CSS\n- Express.js backend API with service layer architecture\n- Gmail API integration service with OAuth 2.0 support\n- Stripe payment processing service (optional, configurable)\n- Complete UI for dashboard, email queue, contacts, donations, and settings\n- Setup page for initial Gmail authentication\n- **NEW:** Configurable email check intervals (30 seconds to 1 hour)\n- **NEW:** Historical email processing that checks emails since last check time\n- **NEW:** User settings for email processing frequency with API usage information\n\n‚è≥ **Setup Requirements:**\n- Gmail OAuth credentials (GMAIL_CLIENT_ID, GMAIL_CLIENT_SECRET, GMAIL_REDIRECT_URI)\n- Stripe API keys for payment processing (STRIPE_SECRET_KEY, VITE_STRIPE_PUBLIC_KEY)\n- OpenAI API key for AI responses (OPENAI_API_KEY) - Currently experiencing quota limits\n\n‚úÖ **Updated Configuration:**\n- Switched to GPT-4o-mini model for cost efficiency ($0.00015 vs $0.005 per 1K tokens)\n- AI responses should now work with current OpenAI account setup\n\nüéØ **Migration Complete (August 7, 2025):** \n‚úÖ Successfully migrated from Replit agent to Replit environment\n‚úÖ PostgreSQL database tables created and configured\n‚úÖ All Node.js dependencies installed and working\n‚úÖ Server running successfully on port 5000\n‚úÖ GMAIL_REDIRECT_URI configured with current Replit domain\n‚úÖ Application ready for API credentials to be added\n\nThe application is fully functional and ready for use once remaining API credentials are provided.\n\n## Recent Changes (January 5, 2025)\n- **CRITICAL BUG FIX**: ‚úÖ RESOLVED - Fixed duplicate email processing issue\n  - **FIXED**: Email deduplication was failing due to missing userId parameter in getPendingEmailByGmailId call\n  - **CLEANED**: Removed duplicate pending email entries from database\n  - **VERIFIED**: Deduplication now working correctly - system properly skips already processed emails\n  - **RESULT**: Each email is now processed exactly once, eliminating duplicate responses and queue entries\n\n- **AI-Powered Email Response System:**\n  - **NEW**: Added AI-generated contextual donation requests using OpenAI GPT-4o-mini (cost-effective)\n  - **NEW**: User toggle in settings to choose between AI responses and template responses\n  - **NEW**: AI analyzes incoming email content to create personalized, warm responses\n  - **NEW**: Enhanced prompting for genuine, conversational tone that acknowledges sender's specific business/request\n  - **NEW**: Improved fallback template for when AI is unavailable (quota limits, etc.)\n  - Added `useAiResponses` boolean field to users table with API endpoint for updates\n\n- **Database Overhaul & Cleanup:**\n  - **MAJOR**: Deleted all pending_emails data to start fresh\n  - **MAJOR**: Added timestamps (`created_at`, `updated_at`) to all database tables\n  - Updated all storage methods to automatically set `updatedAt` on record updates\n  - Enhanced schema with comprehensive timestamp tracking for audit trails\n  - All new database entries now include proper creation and modification timestamps\n\n- **Email Status & Payment Flow Fixes:**\n  - Fixed email status tracking: paid emails now correctly show as \"paid\" instead of \"released\" \n  - Resolved \"Paid\" filter functionality to properly display paid emails\n  - Fixed donations page authentication to show actual donation data ($3.00 from 3 donations)\n  - Enhanced webhook system to properly mark emails as \"paid\" upon payment completion\n  - Created utility endpoint to retroactively update email statuses for whitelisted contacts\n\n- **Dynamic Payment Link System:**\n  - Implemented dynamic Stripe payment links with custom charity names\n  - Added payment_intentions table to track sender-to-recipient payment mapping\n  - Enhanced webhook handling for dynamic payments with automatic sender whitelisting\n  - Created payment success page with detailed confirmation messaging\n  - Integrated charity name customization in user settings\n\n- **Previous Updates (January 4, 2025):**\n  - Email Processing: Configurable check intervals (30 seconds to 1 hour)\n  - Stripe Integration: Full payment processing with webhooks\n  - Auto-Reply Fixes: Eliminated duplicate email issues\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18 with TypeScript using Vite as the build tool\n- **UI Library**: shadcn/ui components built on Radix UI primitives with Tailwind CSS for styling\n- **Routing**: wouter for client-side routing with pages for dashboard, email queue, contacts, donations, and settings\n- **State Management**: TanStack Query for server state management and API calls\n- **Build System**: Vite with TypeScript compilation and hot module replacement\n\n### Backend Architecture\n- **Framework**: Express.js with TypeScript running on Node.js\n- **API Design**: RESTful API with routes for Gmail OAuth, email processing, contact management, and donation handling\n- **Email Processing**: Service-based architecture with dedicated services for Gmail API integration, Stripe payment processing, and email filtering logic\n- **Database Layer**: Drizzle ORM providing type-safe database operations with a storage abstraction layer\n\n### Data Storage Solutions\n- **Database**: PostgreSQL with Drizzle ORM schema definition\n- **Schema Design**: \n  - Users table storing Gmail tokens and Stripe customer IDs\n  - Contacts table for whitelisted email addresses\n  - Pending emails table tracking filtered messages and donation status\n  - Donations table recording completed payments\n  - Email stats table for analytics and dashboard metrics\n- **Migrations**: Drizzle Kit for database schema management and migrations\n\n### Authentication and Authorization\n- **Gmail OAuth**: OAuth 2.0 flow for Gmail API access with token refresh handling\n- **Session Management**: Connect-pg-simple for PostgreSQL-backed session storage\n- **API Security**: Request logging middleware and error handling for API routes\n\n### External Service Integrations\n- **Gmail API**: Google APIs client library for reading emails, managing labels, and email operations\n- **Stripe Integration**: Stripe SDK for payment link generation, checkout sessions, and webhook handling\n- **Neon Database**: Serverless PostgreSQL database with connection pooling\n- **Email Processing**: Automated filtering system that creates donation requests for unknown senders and manages email release after payment\n\n### Key Design Patterns\n- **Service Layer Pattern**: Separate services for Gmail, Stripe, and email processing logic\n- **Repository Pattern**: Storage abstraction layer providing a clean interface for database operations\n- **Middleware Pattern**: Express middleware for request logging, error handling, and authentication\n- **Component Composition**: React components using shadcn/ui patterns with proper TypeScript typing","size_bytes":7693},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2627},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/db.ts":{"content":"import fs from 'fs';\nimport path from 'path';\nimport { Pool } from 'pg';\nimport { drizzle } from 'drizzle-orm/node-postgres';\nimport * as schema from '@shared/schema';\nimport { fileURLToPath } from \"url\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error('DATABASE_URL must be set');\n}\n\n\n// Get __dirname equivalent in ES Modules\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\n// Read your SSL cert\nconst caCert = fs.readFileSync(path.resolve(__dirname, \"../certs/global-bundle.pem\"), \"utf-8\");\n\nconst pool = new Pool({\n  connectionString: process.env.DATABASE_URL,\n  ssl: {\n    ca: caCert,             // ‚úÖ Use the trusted root cert\n    rejectUnauthorized: true // ‚úÖ Enforce cert validation\n  },\n});\n\nexport const db = drizzle(pool, { schema });","size_bytes":801},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"‚Ä¶\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { gmailService } from \"./services/gmail\";\nimport { stripeService } from \"./services/stripe\";\nimport { emailProcessor } from \"./services/email-processor\";\nimport { insertUserSchema, insertContactSchema } from \"@shared/schema\";\nimport Stripe from \"stripe\";\n\n// Initialize Stripe (optional)\nlet stripe: Stripe | null = null;\nif (process.env.STRIPE_SECRET_KEY) {\n  stripe = new Stripe(process.env.STRIPE_SECRET_KEY, {\n    apiVersion: \"2025-07-30.basil\",\n  });\n  console.log('Stripe initialized successfully');\n} else {\n  console.warn('Stripe secret key not found - payment features will be disabled');\n}\n\n// Auto-processing scheduler\nlet processingInterval: NodeJS.Timeout | null = null;\n\nasync function startAutoProcessing() {\n  if (processingInterval) return; // Already running\n\n  console.log(`[${new Date().toISOString()}] Starting auto-processing...`);\n\n  processingInterval = setInterval(async () => {\n    console.log(`[${new Date().toISOString()}] Tick - Checking for users...`);\n    \n    try {\n      const users = await storage.getAllUsers();\n      console.log(`[${new Date().toISOString()}] Found ${users.length} users`);\n\n      for (const user of users) {\n        try {\n          if (!user.gmailToken) {\n            console.log(`[${user.id}] Skipping user (no Gmail token)`);\n            continue;\n          }\n\n          const intervalMinutes = parseFloat(user.emailCheckInterval || \"1.0\");\n          const lastCheckTime = user.lastEmailCheck ? new Date(user.lastEmailCheck) : new Date(0);\n          const timeSinceLastCheck = Date.now() - lastCheckTime.getTime();\n          const intervalMs = intervalMinutes * 60 * 1000;\n\n          console.log(`[${user.id}] Last checked: ${lastCheckTime.toISOString()} | Interval: ${intervalMinutes} min | Time since: ${timeSinceLastCheck} ms`);\n\n          if (timeSinceLastCheck >= intervalMs) {\n            console.log(`[${user.id}] Time to process emails`);\n\n            const { EmailProcessor } = await import('./services/email-processor');\n            const emailProcessor = new EmailProcessor();\n\n            console.log(`[${user.id}] Starting email processing`);\n            await emailProcessor.processNewEmails(user);\n            console.log(`[${user.id}] Finished email processing`);\n\n            await storage.updateUserLastEmailCheck(user.id, new Date());\n            console.log(`[${user.id}] Updated last email check time`);\n          } else {\n            console.log(`[${user.id}] Not enough time passed, skipping`);\n          }\n        } catch (userError: any) {\n          console.error(`[${user.id}] Error processing user:`, userError?.stack || userError);\n        }\n      }\n\n    } catch (error: any) {\n      console.error(`[GLOBAL] Auto-processing error:`, error?.stack || error);\n    }\n  }, 30 * 1000); // Every 30 seconds\n}\n\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Start auto-processing when server starts\n  startAutoProcessing();\n  // User routes\n  app.get(\"/api/users\", async (req, res) => {\n    try {\n      const users = await storage.getAllUsers();\n      res.json(users);\n    } catch (error: any) {\n      res.status(500).json({ message: \"Error fetching users: \" + error.message });\n    }\n  });\n\n  app.get(\"/api/user/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const user = await storage.getUser(id);\n      \n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      \n      res.json(user);\n    } catch (error: any) {\n      res.status(500).json({ message: \"Error fetching user: \" + error.message });\n    }\n  });\n\n  app.delete(\"/api/user/:id\", async (req, res) => {\n    try {\n      console.log('Delete user request received for ID:', req.params.id);\n      const { id } = req.params;\n      const user = await storage.getUser(id);\n      \n      if (!user) {\n        console.error('User not found for deletion:', id);\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      // Revoke Gmail tokens if they exist\n      if (user.gmailRefreshToken) {\n        try {\n          console.log('Revoking Gmail tokens before account deletion...');\n          await gmailService.revokeTokens(user.gmailRefreshToken);\n          console.log('Gmail tokens revoked successfully');\n        } catch (error: any) {\n          console.error('Google token revocation failed during deletion:', error.message);\n        }\n      }\n\n      // Delete user and all associated data (cascade will handle contacts, emails, etc.)\n      console.log('Deleting user from database...');\n      await storage.deleteUser(id);\n      console.log('User deleted successfully');\n\n      res.json({ message: \"User account deleted successfully\" });\n    } catch (error: any) {\n      console.error('Error in delete user endpoint:', error);\n      res.status(500).json({ message: \"Error deleting user: \" + error.message });\n    }\n  });\n\n  // User settings routes\n  app.patch(\"/api/user/:id/email-check-interval\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const { intervalMinutes } = req.body;\n      \n      if (!intervalMinutes || intervalMinutes < 0.5 || intervalMinutes > 60) {\n        return res.status(400).json({ message: \"Interval must be between 0.5 and 60 minutes\" });\n      }\n      \n      const user = await storage.updateUserEmailCheckInterval(id, intervalMinutes);\n      res.json({ message: \"Email check interval updated\", user });\n    } catch (error: any) {\n      res.status(500).json({ message: \"Error updating email check interval: \" + error.message });\n    }\n  });\n\n  app.patch(\"/api/user/:id/charity-name\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const { charityName } = req.body;\n      \n      if (!charityName || charityName.trim().length === 0) {\n        return res.status(400).json({ message: \"Charity name cannot be empty\" });\n      }\n      \n      const user = await storage.updateUserCharityName(id, charityName.trim());\n      res.json({ message: \"Charity name updated\", user });\n    } catch (error: any) {\n      res.status(500).json({ message: \"Error updating charity name: \" + error.message });\n    }\n  });\n\n  app.patch(\"/api/user/:id/ai-responses\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const { useAiResponses } = req.body;\n\n      if (typeof useAiResponses !== 'boolean') {\n        return res.status(400).json({ message: 'useAiResponses must be a boolean' });\n      }\n\n      const user = await storage.updateUserAiResponseSetting(id, useAiResponses);\n      res.json({ message: \"AI response setting updated\", user });\n    } catch (error: any) {\n      res.status(500).json({ message: \"Error updating AI response setting: \" + error.message });\n    }\n  });\n\n  // Update user email interval (new route for dashboard)\n  app.put(\"/api/user/:id/email-interval\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const { emailCheckInterval } = req.body;\n      \n      if (!emailCheckInterval || emailCheckInterval < 0.5 || emailCheckInterval > 60) {\n        return res.status(400).json({ message: \"Interval must be between 0.5 and 60 minutes\" });\n      }\n      \n      const user = await storage.updateUserEmailCheckInterval(id, emailCheckInterval);\n      res.json({ message: \"Email check interval updated\", user });\n    } catch (error: any) {\n      res.status(500).json({ message: \"Error updating email check interval: \" + error.message });\n    }\n  });\n\n  // Update charity name (new route for dashboard)\n  app.put(\"/api/user/:id/charity-name\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const { charityName } = req.body;\n      \n      if (!charityName || charityName.trim().length === 0) {\n        return res.status(400).json({ message: \"Charity name cannot be empty\" });\n      }\n      \n      const user = await storage.updateUserCharityName(id, charityName.trim());\n      res.json({ message: \"Charity name updated\", user });\n    } catch (error: any) {\n      res.status(500).json({ message: \"Error updating charity name: \" + error.message });\n    }\n  });\n\n  // Manual sync endpoint  \n  app.post(\"/api/manual-sync\", async (req, res) => {\n    try {\n      // For now, we'll just trigger processing for all users\n      const users = await storage.getAllUsers();\n      \n      for (const user of users) {\n        if (user.gmailToken) {\n          try {\n            const { EmailProcessor } = await import('./services/email-processor');\n            const emailProcessor = new EmailProcessor();\n            await emailProcessor.processNewEmails(user);\n            \n            // Update last check time\n            await storage.updateUserLastEmailCheck(user.id, new Date());\n          } catch (error: any) {\n            console.error(`Error processing emails for user ${user.id}:`, error.message);\n          }\n        }\n      }\n      \n      res.json({ message: \"Manual sync initiated for all users\" });\n    } catch (error: any) {\n      res.status(500).json({ message: \"Error during manual sync: \" + error.message });\n    }\n  });\n\n  // Gmail OAuth routes\n  app.get(\"/api/auth/gmail\", async (req, res) => {\n    try {\n      const authUrl = gmailService.getAuthUrl();\n      res.json({ authUrl });\n    } catch (error: any) {\n      res.status(500).json({ message: \"Error generating auth URL: \" + error.message });\n    }\n  });\n\n  // Gmail revoke access\n  app.post(\"/api/auth/gmail/revoke\", async (req, res) => {\n    try {\n      console.log('Gmail revoke request received:', req.body);\n      const { userId } = req.body;\n      \n      if (!userId) {\n        console.error('No userId provided in revoke request');\n        return res.status(400).json({ message: \"User ID is required\" });\n      }\n\n      const user = await storage.getUser(userId);\n      if (!user) {\n        console.error('User not found:', userId);\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      if (!user.gmailRefreshToken) {\n        console.log('No Gmail refresh token found for user:', userId);\n        return res.status(400).json({ message: \"No Gmail tokens to revoke\" });\n      }\n\n      // Revoke the refresh token with Google\n      try {\n        console.log('Attempting to revoke tokens with Google...');\n        await gmailService.revokeTokens(user.gmailRefreshToken);\n        console.log('Google token revocation successful');\n      } catch (error: any) {\n        console.error('Google token revocation failed:', error.message);\n        // Continue anyway to clear local tokens\n      }\n\n      // Clear Gmail tokens from database\n      console.log('Clearing Gmail tokens from database...');\n      await storage.updateUserGmailTokens(userId, \"\", \"\");\n      console.log('Gmail tokens cleared from database');\n\n      res.json({ message: \"Gmail access revoked successfully\" });\n    } catch (error: any) {\n      console.error('Error in Gmail revoke endpoint:', error);\n      res.status(500).json({ message: \"Error revoking Gmail access: \" + error.message });\n    }\n  });\n\n  app.post(\"/api/auth/gmail/callback\", async (req, res) => {\n    try {\n      console.log('Gmail OAuth callback received:', req.body);\n      const { code, email } = req.body;\n      \n      if (!code || !email) {\n        console.log('Missing code or email in callback');\n        return res.status(400).json({ message: \"Code and email are required\" });\n      }\n\n      console.log('Getting tokens from Gmail...');\n      const tokens = await gmailService.getTokens(code);\n      console.log('Tokens received:', { hasAccessToken: !!tokens.access_token, hasRefreshToken: !!tokens.refresh_token });\n      \n      // Create or update user\n      console.log('Looking for existing user with email:', email);\n      let user = await storage.getUserByEmail(email);\n      \n      if (!user) {\n        console.log('Creating new user...');\n        user = await storage.createUser({ email });\n        console.log('User created:', user.id);\n      } else {\n        console.log('Found existing user:', user.id);\n      }\n\n      if (tokens.access_token && tokens.refresh_token) {\n        console.log('Updating user Gmail tokens...');\n        user = await storage.updateUserGmailTokens(user.id, tokens.access_token, tokens.refresh_token);\n        console.log('Tokens updated successfully');\n      }\n\n      // Create Gmail labels\n      if (tokens.access_token) {\n        console.log('Creating Gmail labels...');\n        await gmailService.createLabels(tokens.access_token);\n        console.log('Labels created successfully');\n      }\n\n      res.json({ user, tokens });\n    } catch (error: any) {\n      console.error('Gmail callback error:', error);\n      res.status(500).json({ message: \"Error handling Gmail callback: \" + error.message });\n    }\n  });\n\n  // Dashboard stats\n  app.get(\"/api/dashboard/stats\", async (req, res) => {\n    try {\n      const { userId } = req.query;\n      \n      if (!userId) {\n        return res.status(400).json({ message: \"User ID is required\" });\n      }\n\n      const stats = await storage.getDashboardStats(userId as string);\n      res.json(stats);\n    } catch (error: any) {\n      res.status(500).json({ message: \"Error fetching dashboard stats: \" + error.message });\n    }\n  });\n\n  // Contacts management\n  app.get(\"/api/contacts\", async (req, res) => {\n    try {\n      const { userId } = req.query;\n      \n      if (!userId) {\n        return res.status(400).json({ message: \"User ID is required\" });\n      }\n\n      const contacts = await storage.getContacts(userId as string);\n      res.json(contacts);\n    } catch (error: any) {\n      res.status(500).json({ message: \"Error fetching contacts: \" + error.message });\n    }\n  });\n\n  app.post(\"/api/contacts\", async (req, res) => {\n    try {\n      const validatedData = insertContactSchema.parse(req.body);\n      const contact = await storage.createContact(validatedData);\n      res.json(contact);\n    } catch (error: any) {\n      res.status(400).json({ message: \"Error creating contact: \" + error.message });\n    }\n  });\n\n  app.delete(\"/api/contacts/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      await storage.deleteContact(id);\n      res.json({ success: true });\n    } catch (error: any) {\n      res.status(500).json({ message: \"Error deleting contact: \" + error.message });\n    }\n  });\n\n  // Pending emails\n  app.get(\"/api/pending-emails\", async (req, res) => {\n    try {\n      const { userId } = req.query;\n      \n      if (!userId) {\n        return res.status(400).json({ message: \"User ID is required\" });\n      }\n\n      const pendingEmails = await storage.getPendingEmails(userId as string);\n      res.json(pendingEmails);\n    } catch (error: any) {\n      res.status(500).json({ message: \"Error fetching pending emails: \" + error.message });\n    }\n  });\n\n  // Donations\n  app.get(\"/api/donations\", async (req, res) => {\n    try {\n      const { userId } = req.query;\n      \n      if (!userId) {\n        return res.status(400).json({ message: \"User ID is required\" });\n      }\n\n      const donations = await storage.getDonations(userId as string);\n      res.json(donations);\n    } catch (error: any) {\n      res.status(500).json({ message: \"Error fetching donations: \" + error.message });\n    }\n  });\n\n  app.get(\"/api/donations/recent\", async (req, res) => {\n    try {\n      const { userId, limit } = req.query;\n      \n      if (!userId) {\n        return res.status(400).json({ message: \"User ID is required\" });\n      }\n\n      const donations = await storage.getRecentDonations(\n        userId as string, \n        limit ? parseInt(limit as string) : undefined\n      );\n      res.json(donations);\n    } catch (error: any) {\n      res.status(500).json({ message: \"Error fetching recent donations: \" + error.message });\n    }\n  });\n\n  // Email processing\n  app.post(\"/api/process-emails\", async (req, res) => {\n    try {\n      console.log('Email processing request received:', req.body);\n      const { userId } = req.body;\n      \n      if (!userId) {\n        return res.status(400).json({ message: \"User ID is required\" });\n      }\n\n      const user = await storage.getUser(userId);\n      if (!user || !user.gmailToken) {\n        return res.status(404).json({ message: \"User not found or Gmail not connected\" });\n      }\n\n      // Import EmailProcessor dynamically to avoid circular dependencies\n      const { EmailProcessor } = await import('./services/email-processor');\n      const emailProcessor = new EmailProcessor();\n      \n      console.log('Starting email processing for user:', user.email);\n      await emailProcessor.processNewEmails(user);\n      console.log('Email processing completed');\n      \n      res.json({ success: true, message: \"Email processing completed\" });\n    } catch (error: any) {\n      res.status(500).json({ message: \"Error processing emails: \" + error.message });\n    }\n  });\n\n  // Stripe payment endpoints\n  app.post(\"/api/create-payment-intent\", async (req, res) => {\n    try {\n      if (!stripe) {\n        return res.status(503).json({ message: \"Payment service not configured\" });\n      }\n\n      const { amount, senderEmail, pendingEmailId } = req.body;\n      \n      if (!amount || !senderEmail) {\n        return res.status(400).json({ message: \"Amount and sender email are required\" });\n      }\n      \n      const paymentIntent = await stripe.paymentIntents.create({\n        amount: Math.round(amount * 100), // Convert to cents\n        currency: \"usd\",\n        metadata: {\n          senderEmail,\n          pendingEmailId: pendingEmailId || '',\n          type: 'email_access_donation'\n        }\n      });\n      \n      res.json({ clientSecret: paymentIntent.client_secret });\n    } catch (error: any) {\n      res.status(500).json({ message: \"Error creating payment intent: \" + error.message });\n    }\n  });\n\n  app.post(\"/api/create-payment-link\", async (req, res) => {\n    try {\n      if (!stripe) {\n        return res.status(503).json({ message: \"Payment service not configured\" });\n      }\n\n      const { amount, senderEmail, pendingEmailId, userId } = req.body;\n      \n      if (!amount || !senderEmail || !pendingEmailId || !userId) {\n        return res.status(400).json({ message: \"Missing required fields\" });\n      }\n\n      // Create a payment link for the donation\n      const paymentLink = await stripe.paymentLinks.create({\n        line_items: [\n          {\n            price_data: {\n              currency: 'usd',\n              product_data: {\n                name: 'Email Access Donation',\n                description: `Access donation from ${senderEmail}`,\n              },\n              unit_amount: Math.round(amount * 100), // Convert to cents\n            },\n            quantity: 1,\n          },\n        ],\n        payment_method_types: ['card'], // Explicitly specify card payments\n        metadata: {\n          senderEmail,\n          pendingEmailId,\n          userId,\n          type: 'email_access_donation'\n        }\n      });\n\n      res.json({ \n        paymentUrl: paymentLink.url,\n        paymentLinkId: paymentLink.id \n      });\n    } catch (error: any) {\n      res.status(500).json({ message: \"Error creating payment linkkkkk: \" + error.message });\n    }\n  });\n\n  // Create dynamic payment link for sender to access user's inbox\n  app.post(\"/api/create-dynamic-payment-link\", async (req, res) => {\n    try {\n      if (!stripe) {\n        return res.status(503).json({ message: \"Payment service not configured\" });\n      }\n\n      const { targetEmail, senderEmail, charityName, amount = 1.00 } = req.body;\n      \n      if (!targetEmail || !senderEmail) {\n        return res.status(400).json({ message: \"Target email and sender email are required\" });\n      }\n\n      // Find the target user\n      const targetUser = await storage.getUserByEmail(targetEmail);\n      if (!targetUser) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      // Create Stripe payment link\n      const paymentLink = await stripe.paymentLinks.create({\n        line_items: [\n          {\n            price_data: {\n              currency: 'usd',\n              product_data: {\n                name: `Email Access to ${targetEmail}`,\n                description: `Donation to ${charityName || targetUser.charityName || 'Email Guardian'} for inbox access`,\n              },\n              unit_amount: Math.round(amount * 100), // Convert to cents\n            },\n            quantity: 1,\n          },\n        ],\n        metadata: {\n          targetEmail,\n          senderEmail,\n          userId: targetUser.id,\n          type: 'inbox_access'\n        },\n        after_completion: {\n          type: 'redirect',\n          redirect: {\n            url: `${process.env.VITE_APP_URL || 'https://emailguardian.com'}/payment-success?sender=${encodeURIComponent(senderEmail)}&target=${encodeURIComponent(targetEmail)}`\n          }\n        },\n      });\n\n      // Store payment intention\n      await storage.createPaymentIntention({\n        userId: targetUser.id,\n        senderEmail,\n        targetEmail,\n        stripePaymentLinkId: paymentLink.id,\n        amount: amount.toString(),\n        status: 'pending',\n        metadata: { charityName: charityName || targetUser.charityName }\n      });\n\n      res.json({ \n        paymentLink: paymentLink.url,\n        paymentLinkId: paymentLink.id \n      });\n    } catch (error: any) {\n      console.error('Error creating dynamic payment linkkk:', error);\n      res.status(500).json({ message: \"Error creating payment link: \" + error.message });\n    }\n  });\n\n  // Webhook event logger for debugging\n  app.post(\"/api/webhooks/stripe-debug\", async (req, res) => {\n    console.log('\\n=== STRIPE WEBHOOK DEBUG ===');\n    console.log('Headers:', JSON.stringify(req.headers, null, 2));\n    console.log('Body:', JSON.stringify(req.body, null, 2));\n    console.log('=== END WEBHOOK DEBUG ===\\n');\n    res.json({ received: true, debug: true });\n  });\n\n  // Stripe webhooks for payment completion\n  app.post(\"/api/webhooks/stripe\", async (req, res) => {\n    const sig = req.headers['stripe-signature'];\n    let event;\n\n    try {\n      // For testing, accept any webhook without verification\n      // In production, you should verify with your webhook secret\n      event = req.body;\n    } catch (err: any) {\n      console.log('Webhook signature verification failed.', err.message);\n      return res.status(400).send(`Webhook Error: ${err.message}`);\n    }\n\n    // Enhanced logging for all webhook events\n    console.log('\\n=== STRIPE WEBHOOK RECEIVED ===');\n    console.log(`Event Type: ${event.type}`);\n    console.log(`Event ID: ${event.id}`);\n    console.log(`Event Data:`, JSON.stringify(event.data, null, 2));\n    console.log('=== END WEBHOOK DATA ===\\n');\n    \n    switch (event.type) {\n      case 'payment_intent.succeeded':\n        const paymentIntent = event.data.object;\n        console.log('Payment Intent succeeded:', paymentIntent.id, paymentIntent.metadata);\n        if (paymentIntent.metadata?.type === 'email_access_donation') {\n          await handlePaymentSuccess(paymentIntent.metadata);\n        } else if (paymentIntent.metadata?.type === 'inbox_access') {\n          await handleDynamicPaymentSuccess(paymentIntent.metadata, paymentIntent.id);\n        } else {\n          // Try to handle payment without metadata by checking if it's from a payment link\n          console.log('Payment Intent without inbox_access metadata, checking for payment link association');\n          await handleDynamicPaymentSuccess({}, paymentIntent.id);\n        }\n        break;\n      case 'checkout.session.completed':\n        const session = event.data.object;\n        console.log('Checkout session completed:', session.id, session.metadata);\n        if (session.metadata?.type === 'email_access_donation') {\n          await handlePaymentSuccess(session.metadata);\n        } else if (session.metadata?.type === 'inbox_access') {\n          await handleDynamicPaymentSuccess(session.metadata, session.id);\n        } else {\n          // Try to handle session without metadata\n          console.log('Checkout session without inbox_access metadata, checking for payment link association');\n          await handleDynamicPaymentSuccess({}, session.id);\n        }\n        break;\n      case 'payment_link.payment_intent.succeeded':\n        const linkPaymentIntent = event.data.object;\n        console.log('Payment Link Payment Intent succeeded:', linkPaymentIntent.id, linkPaymentIntent.metadata);\n        if (linkPaymentIntent.metadata?.type === 'inbox_access') {\n          await handleDynamicPaymentSuccess(linkPaymentIntent.metadata, linkPaymentIntent.id);\n        } else {\n          // Handle payment link payment without metadata\n          await handleDynamicPaymentSuccess({}, linkPaymentIntent.id);\n        }\n        break;\n      default:\n        console.log(`Unhandled event type ${event.type}`, event.data?.object?.id || 'no ID');\n    }\n\n    res.json({ received: true });\n  });\n\n  async function handlePaymentSuccess(metadata: any) {\n    try {\n      const { senderEmail, pendingEmailId, userId } = metadata;\n      \n      if (!senderEmail || !userId) {\n        console.log('Missing metadata for payment success');\n        return;\n      }\n\n      console.log(`Payment successful for ${senderEmail}, processing access...`);\n      \n      // Import EmailProcessor to avoid circular dependencies\n      const { EmailProcessor } = await import('./services/email-processor');\n      const emailProcessor = new EmailProcessor();\n      \n      // Process the donation completion\n      await emailProcessor.processDonationComplete(senderEmail, userId);\n      \n      console.log(`Email access granted to ${senderEmail}`);\n    } catch (error: any) {\n      console.error('Error handling payment success:', error.message);\n    }\n  }\n\n  async function handleDynamicPaymentSuccess(metadata: any, sessionId: string, paymentLinkId?: string) {\n    try {\n      let { senderEmail, targetEmail, userId } = metadata;\n      \n      // If metadata is missing, try to find the payment intention by payment link ID or session ID\n      if (!senderEmail || !targetEmail || !userId) {\n        console.log('Missing metadata, attempting to find payment intention...', { paymentLinkId, sessionId });\n        \n        // Try to find by payment link ID first\n        if (paymentLinkId) {\n          const intention = await storage.getPaymentIntentionByStripeLink(paymentLinkId);\n          if (intention) {\n            senderEmail = intention.senderEmail;\n            targetEmail = intention.targetEmail;\n            userId = intention.userId;\n            console.log(`Found payment intention by link ID: ${senderEmail} -> ${targetEmail}`);\n          }\n        }\n        \n        // If still missing, try to find most recent pending intention (fallback)\n        if (!senderEmail && sessionId) {\n          const allUsers = await storage.getAllUsers();\n          for (const user of allUsers) {\n            const intentions = await storage.getPaymentIntentionsBySender('', user.email);\n            const pendingIntentions = intentions.filter(i => i.status === 'pending');\n            if (pendingIntentions.length > 0) {\n              const mostRecent = pendingIntentions.sort((a, b) => \n                new Date(b.createdAt || 0).getTime() - new Date(a.createdAt || 0).getTime()\n              )[0];\n              senderEmail = mostRecent.senderEmail;\n              targetEmail = mostRecent.targetEmail;\n              userId = mostRecent.userId;\n              console.log(`Found most recent pending intention: ${senderEmail} -> ${targetEmail}`);\n              break;\n            }\n          }\n        }\n      }\n      \n      if (!senderEmail || !targetEmail || !userId) {\n        console.log('Missing required data for dynamic payment success:', { senderEmail, targetEmail, userId, sessionId, paymentLinkId });\n        return;\n      }\n\n      console.log(`Dynamic payment successful for ${senderEmail} to access ${targetEmail}`);\n      \n      // Update payment intention status\n      const intentions = await storage.getPaymentIntentionsBySender(senderEmail, targetEmail);\n      if (intentions.length > 0) {\n        await storage.updatePaymentIntentionStatus(intentions[0].id, 'paid', sessionId);\n      }\n      \n      // Create donation record for dashboard tracking\n      try {\n        await storage.createDonation({\n          userId,\n          amount: \"1.00\", // $1 donation\n          senderEmail,\n          status: \"completed\",\n          stripeSessionId: sessionId\n        });\n        console.log(`Created donation record for ${senderEmail} payment to ${targetEmail}`);\n      } catch (donationError: any) {\n        console.error(`Failed to create donation record: ${donationError.message}`);\n        // Continue with contact creation even if donation fails\n      }\n      \n      // Automatically whitelist the sender\n      const existingContact = await storage.getContactByEmail(userId, senderEmail);\n      if (!existingContact) {\n        await storage.createContact({\n          userId,\n          email: senderEmail,\n          name: senderEmail.split('@')[0], // Use email prefix as name\n          isWhitelisted: true\n        });\n        console.log(`Added ${senderEmail} to whitelist for ${targetEmail}`);\n      } else {\n        // Update existing contact to be whitelisted\n        if (!existingContact.isWhitelisted) {\n          await storage.updateContact(existingContact.id, { isWhitelisted: true });\n          console.log(`Updated ${senderEmail} to whitelisted status for ${targetEmail}`);\n        }\n      }\n      \n      // Import EmailProcessor to process any pending emails\n      const { EmailProcessor } = await import('./services/email-processor');\n      const emailProcessor = new EmailProcessor();\n      \n      // Process any pending emails from this sender (this will mark them as \"paid\")\n      await emailProcessor.processDonationComplete(senderEmail, userId);\n      \n      // Update email stats to reflect successful payment\n      const today = new Date();\n      today.setHours(0, 0, 0, 0);\n      const stats = await storage.getEmailStats(userId, today);\n      const currentReceived = stats ? parseInt(stats.donationsReceived || \"0\") : 0;\n      \n      await storage.createOrUpdateEmailStats(userId, today, {\n        donationsReceived: (currentReceived + 1).toString()\n      });\n      \n      console.log(`Dynamic email access granted to ${senderEmail} for ${targetEmail}`);\n    } catch (error: any) {\n      console.error('Error handling dynamic payment success:', error.message);\n    }\n  }\n\n  // Manual webhook trigger for testing\n  app.post(\"/api/test-webhook\", async (req, res) => {\n    try {\n      const { senderEmail, targetEmail } = req.body;\n      \n      if (!senderEmail || !targetEmail) {\n        return res.status(400).json({ message: \"senderEmail and targetEmail are required\" });\n      }\n\n      const targetUser = await storage.getUserByEmail(targetEmail);\n      if (!targetUser) {\n        return res.status(404).json({ message: \"Target user not found\" });\n      }\n\n      console.log(`Manual webhook trigger: ${senderEmail} -> ${targetEmail}`);\n      \n      await handleDynamicPaymentSuccess({\n        senderEmail,\n        targetEmail,\n        userId: targetUser.id,\n        type: 'inbox_access'\n      }, `manual_${Date.now()}`);\n\n      res.json({ \n        message: `Manual payment processing completed for ${senderEmail} -> ${targetEmail}`,\n        success: true \n      });\n    } catch (error: any) {\n      console.error('Error in manual webhook trigger:', error);\n      res.status(500).json({ message: \"Error processing manual webhook: \" + error.message });\n    }\n  });\n\n  // Utility endpoint to update pending email statuses for paid contacts\n  app.post(\"/api/update-paid-statuses\", async (req, res) => {\n    try {\n      const { userId } = req.body;\n      \n      if (!userId) {\n        return res.status(400).json({ message: \"User ID is required\" });\n      }\n\n      // Get all contacts that are whitelisted\n      const contacts = await storage.getContacts(userId);\n      const whitelistedContacts = contacts.filter(contact => contact.isWhitelisted);\n      \n      // Get all pending emails\n      const pendingEmails = await storage.getPendingEmails(userId);\n      \n      let updatedCount = 0;\n      \n      // Update status to \"paid\" for all emails from whitelisted contacts\n      for (const contact of whitelistedContacts) {\n        const contactEmails = pendingEmails.filter(email => \n          email.sender === contact.email && email.status !== 'paid'\n        );\n        \n        for (const email of contactEmails) {\n          await storage.updatePendingEmailStatus(email.id, \"paid\");\n          updatedCount++;\n          console.log(`Updated email ${email.id} from ${contact.email} to paid status`);\n        }\n      }\n\n      res.json({ \n        message: `Updated ${updatedCount} emails to paid status`,\n        updatedCount,\n        whitelistedContacts: whitelistedContacts.length\n      });\n    } catch (error: any) {\n      console.error('Error updating paid statuses:', error);\n      res.status(500).json({ message: \"Error updating statuses: \" + error.message });\n    }\n  });\n\n  // Cleanup endpoint for removing duplicate auto-reply emails\n  app.post(\"/api/cleanup-duplicate-emails\", async (req, res) => {\n    try {\n      const { userId } = req.body;\n      \n      if (!userId) {\n        return res.status(400).json({ message: \"User ID is required\" });\n      }\n\n      const user = await storage.getUser(userId);\n      if (!user || !user.gmailToken) {\n        return res.json({ message: \"User not found or Gmail not connected\", cleaned: 0 });\n      }\n\n      // Get all pending emails for this user\n      const pendingEmails = await storage.getPendingEmails(userId);\n      \n      // Find duplicate auto-reply emails (ones with \"- Email Access Request\" in subject)\n      const autoReplyEmails = pendingEmails.filter(email => \n        email.subject?.includes('- Email Access Request') || \n        email.subject?.includes('Re: Re:') ||\n        email.sender === user.email\n      );\n\n      console.log(`Found ${autoReplyEmails.length} duplicate auto-reply emails to clean up`);\n\n      // Remove duplicate auto-reply emails from Gmail and database\n      for (const email of autoReplyEmails) {\n        try {\n          // Try to remove from Gmail (moving to trash)\n          await gmailService.removeFromInbox(user.gmailToken!, email.gmailMessageId);\n        } catch (error) {\n          // Continue even if Gmail removal fails\n          console.log(`Failed to remove Gmail message ${email.gmailMessageId}, continuing...`);\n        }\n        \n        // Delete from database\n        await storage.deletePendingEmail(email.id);\n      }\n\n      res.json({ \n        message: `Cleaned up ${autoReplyEmails.length} duplicate auto-reply emails`,\n        cleaned: autoReplyEmails.length \n      });\n    } catch (error: any) {\n      console.error('Cleanup error:', error);\n      res.status(500).json({ message: \"Error cleaning up emails: \" + error.message });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":35044},"server/storage.ts":{"content":"import { \n  users, contacts, pendingEmails, donations, emailStats, paymentIntentions,\n  type User, type InsertUser,\n  type Contact, type InsertContact,\n  type PendingEmail, type InsertPendingEmail,\n  type Donation, type InsertDonation,\n  type EmailStats, type InsertEmailStats,\n  type PaymentIntention, type InsertPaymentIntention\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc, and, gte, lte, sql } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // User methods\n  getAllUsers(): Promise<User[]>;\n  getUser(id: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUserGmailTokens(id: string, token: string, refreshToken: string): Promise<User>;\n  updateUserStripeCustomerId(id: string, customerId: string): Promise<User>;\n  updateUserLastEmailCheck(id: string, lastCheck: Date): Promise<User>;\n  updateUserEmailCheckInterval(id: string, intervalMinutes: number): Promise<User>;\n  updateUserCharityName(id: string, charityName: string): Promise<User>;\n  deleteUser(id: string): Promise<void>;\n\n  // Contact methods\n  getContacts(userId: string): Promise<Contact[]>;\n  getContactByEmail(userId: string, email: string): Promise<Contact | undefined>;\n  createContact(contact: InsertContact): Promise<Contact>;\n  updateContact(id: string, updates: Partial<InsertContact>): Promise<Contact>;\n  deleteContact(id: string): Promise<void>;\n  isEmailWhitelisted(userId: string, email: string): Promise<boolean>;\n\n  // Pending email methods\n  getPendingEmails(userId: string): Promise<PendingEmail[]>;\n  createPendingEmail(email: InsertPendingEmail): Promise<PendingEmail>;\n  updatePendingEmailStatus(id: string, status: string): Promise<PendingEmail>;\n  updatePendingEmailDonationLink(id: string, donationLinkId: string): Promise<PendingEmail>;\n  getPendingEmailByGmailId(userId: string, gmailMessageId: string): Promise<PendingEmail | undefined>;\n  deletePendingEmail(id: string): Promise<void>;\n\n  // Donation methods\n  getDonations(userId: string): Promise<Donation[]>;\n  getRecentDonations(userId: string, limit?: number): Promise<Donation[]>;\n  createDonation(donation: InsertDonation): Promise<Donation>;\n  getDonationByStripeSession(sessionId: string): Promise<Donation | undefined>;\n\n  // Stats methods\n  getEmailStats(userId: string, date: Date): Promise<EmailStats | undefined>;\n  createOrUpdateEmailStats(userId: string, date: Date, stats: Partial<EmailStats>): Promise<EmailStats>;\n  getDashboardStats(userId: string): Promise<{\n    emailsFiltered: number;\n    pendingDonations: number;\n    donationsReceived: number;\n    knownContacts: number;\n  }>;\n\n  // Payment intention methods\n  createPaymentIntention(intention: InsertPaymentIntention): Promise<PaymentIntention>;\n  getPaymentIntentionByStripeLink(linkId: string): Promise<PaymentIntention | undefined>;\n  updatePaymentIntentionStatus(id: string, status: string, sessionId?: string): Promise<PaymentIntention>;\n  getPaymentIntentionsBySender(senderEmail: string, targetEmail: string): Promise<PaymentIntention[]>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  async getAllUsers(): Promise<User[]> {\n    return await db.select().from(users);\n  }\n\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user || undefined;\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.email, email));\n    return user || undefined;\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(insertUser)\n      .returning();\n    return user;\n  }\n\n  async updateUserGmailTokens(id: string, token: string, refreshToken: string): Promise<User> {\n    const [user] = await db\n      .update(users)\n      .set({ gmailToken: token, gmailRefreshToken: refreshToken, updatedAt: new Date() })\n      .where(eq(users.id, id))\n      .returning();\n    return user;\n  }\n\n  async updateUserStripeCustomerId(id: string, customerId: string): Promise<User> {\n    const [user] = await db\n      .update(users)\n      .set({ stripeCustomerId: customerId, updatedAt: new Date() })\n      .where(eq(users.id, id))\n      .returning();\n    return user;\n  }\n\n  async updateUserLastEmailCheck(id: string, lastCheck: Date): Promise<User> {\n    const [user] = await db\n      .update(users)\n      .set({ lastEmailCheck: lastCheck, updatedAt: new Date() })\n      .where(eq(users.id, id))\n      .returning();\n    return user;\n  }\n\n  async updateUserEmailCheckInterval(id: string, intervalMinutes: number): Promise<User> {\n    const [user] = await db\n      .update(users)\n      .set({ emailCheckInterval: intervalMinutes.toString(), updatedAt: new Date() })\n      .where(eq(users.id, id))\n      .returning();\n    return user;\n  }\n\n  async updateUserCharityName(id: string, charityName: string): Promise<User> {\n    const [user] = await db\n      .update(users)\n      .set({ charityName, updatedAt: new Date() })\n      .where(eq(users.id, id))\n      .returning();\n    return user;\n  }\n\n  async updateUserAiResponseSetting(id: string, useAiResponses: boolean): Promise<User> {\n    const [user] = await db\n      .update(users)\n      .set({ useAiResponses, updatedAt: new Date() })\n      .where(eq(users.id, id))\n      .returning();\n    return user;\n  }\n\n  async deleteUser(id: string): Promise<void> {\n    await db.delete(users).where(eq(users.id, id));\n  }\n\n  async getContacts(userId: string): Promise<Contact[]> {\n    return await db.select().from(contacts).where(eq(contacts.userId, userId));\n  }\n\n  async getContactByEmail(userId: string, email: string): Promise<Contact | undefined> {\n    const [contact] = await db\n      .select()\n      .from(contacts)\n      .where(and(eq(contacts.userId, userId), eq(contacts.email, email)));\n    return contact || undefined;\n  }\n\n  async createContact(contact: InsertContact): Promise<Contact> {\n    const [newContact] = await db\n      .insert(contacts)\n      .values(contact)\n      .returning();\n    return newContact;\n  }\n\n  async updateContact(id: string, updates: Partial<InsertContact>): Promise<Contact> {\n    const [updatedContact] = await db\n      .update(contacts)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(contacts.id, id))\n      .returning();\n    return updatedContact;\n  }\n\n  async deleteContact(id: string): Promise<void> {\n    await db.delete(contacts).where(eq(contacts.id, id));\n  }\n\n  async isEmailWhitelisted(userId: string, email: string): Promise<boolean> {\n    const contact = await this.getContactByEmail(userId, email);\n    return contact?.isWhitelisted ?? false;\n  }\n\n  async getPendingEmails(userId: string): Promise<PendingEmail[]> {\n    return await db\n      .select()\n      .from(pendingEmails)\n      .where(eq(pendingEmails.userId, userId))\n      .orderBy(desc(pendingEmails.receivedAt));\n  }\n\n  async createPendingEmail(email: InsertPendingEmail): Promise<PendingEmail> {\n    const [newEmail] = await db\n      .insert(pendingEmails)\n      .values(email)\n      .returning();\n    return newEmail;\n  }\n\n  async updatePendingEmailStatus(id: string, status: string): Promise<PendingEmail> {\n    const [updatedEmail] = await db\n      .update(pendingEmails)\n      .set({ status, updatedAt: new Date() })\n      .where(eq(pendingEmails.id, id))\n      .returning();\n    return updatedEmail;\n  }\n\n  async updatePendingEmailDonationLink(id: string, donationLinkId: string): Promise<PendingEmail> {\n    const [updatedEmail] = await db\n      .update(pendingEmails)\n      .set({ donationLinkId, status: \"donation_sent\", updatedAt: new Date() })\n      .where(eq(pendingEmails.id, id))\n      .returning();\n    return updatedEmail;\n  }\n\n  async getPendingEmailByGmailId(userId: string, gmailMessageId: string): Promise<PendingEmail | undefined> {\n    const [email] = await db\n      .select()\n      .from(pendingEmails)\n      .where(and(eq(pendingEmails.userId, userId), eq(pendingEmails.gmailMessageId, gmailMessageId)));\n    return email || undefined;\n  }\n\n  async deletePendingEmail(id: string): Promise<void> {\n    await db.delete(pendingEmails).where(eq(pendingEmails.id, id));\n  }\n\n  async getDonations(userId: string): Promise<Donation[]> {\n    return await db\n      .select()\n      .from(donations)\n      .where(eq(donations.userId, userId))\n      .orderBy(desc(donations.paidAt));\n  }\n\n  async getRecentDonations(userId: string, limit = 10): Promise<Donation[]> {\n    return await db\n      .select()\n      .from(donations)\n      .where(eq(donations.userId, userId))\n      .orderBy(desc(donations.paidAt))\n      .limit(limit);\n  }\n\n  async createDonation(donation: InsertDonation): Promise<Donation> {\n    const [newDonation] = await db\n      .insert(donations)\n      .values(donation)\n      .returning();\n    return newDonation;\n  }\n\n  async getDonationByStripeSession(sessionId: string): Promise<Donation | undefined> {\n    const [donation] = await db\n      .select()\n      .from(donations)\n      .where(eq(donations.stripeSessionId, sessionId));\n    return donation || undefined;\n  }\n\n  async getEmailStats(userId: string, date: Date): Promise<EmailStats | undefined> {\n    const [stats] = await db\n      .select()\n      .from(emailStats)\n      .where(and(eq(emailStats.userId, userId), eq(emailStats.date, date)));\n    return stats || undefined;\n  }\n\n  async createOrUpdateEmailStats(userId: string, date: Date, stats: Partial<EmailStats>): Promise<EmailStats> {\n    const existing = await this.getEmailStats(userId, date);\n    \n    if (existing) {\n      const [updated] = await db\n        .update(emailStats)\n        .set({ ...stats, updatedAt: new Date() })\n        .where(and(eq(emailStats.userId, userId), eq(emailStats.date, date)))\n        .returning();\n      return updated;\n    } else {\n      const [created] = await db\n        .insert(emailStats)\n        .values({ userId, date, ...stats })\n        .returning();\n      return created;\n    }\n  }\n\n  async getDashboardStats(userId: string): Promise<{\n    emailsFiltered: number;\n    emailsFilteredYesterday: number;\n    pendingDonations: number;\n    pendingDonationsRevenue: number;\n    donationsReceived: number;\n    donationsCount: number;\n    knownContacts: number;\n    contactsAddedThisWeek: number;\n  }> {\n    // Get today's stats\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n    \n    // Get yesterday's stats\n    const yesterday = new Date(today);\n    yesterday.setDate(yesterday.getDate() - 1);\n    \n    // Get week start (7 days ago)\n    const weekStart = new Date(today);\n    weekStart.setDate(weekStart.getDate() - 7);\n    \n    const todayStats = await this.getEmailStats(userId, today);\n    const yesterdayStats = await this.getEmailStats(userId, yesterday);\n    \n    // Get all pending emails (not just count)\n    const pendingEmailsList = await db\n      .select()\n      .from(pendingEmails)\n      .where(and(eq(pendingEmails.userId, userId), eq(pendingEmails.status, \"pending\")));\n\n    const totalDonations = await db\n      .select()\n      .from(donations)\n      .where(eq(donations.userId, userId));\n\n    const contactCount = await db\n      .select()\n      .from(contacts)\n      .where(eq(contacts.userId, userId));\n      \n    // Get contacts added this week\n    const recentContacts = await db\n      .select()\n      .from(contacts)\n      .where(and(\n        eq(contacts.userId, userId),\n        sql`${contacts.createdAt} >= ${weekStart}`\n      ));\n\n    const totalDonationAmount = totalDonations.reduce((sum, donation) => \n      sum + parseFloat(donation.amount), 0);\n\n    return {\n      emailsFiltered: todayStats ? parseInt(todayStats.emailsFiltered || \"0\") : 0,\n      emailsFilteredYesterday: yesterdayStats ? parseInt(yesterdayStats.emailsFiltered || \"0\") : 0,\n      pendingDonations: pendingEmailsList.length,\n      pendingDonationsRevenue: pendingEmailsList.length * 1.0, // $1 per pending donation\n      donationsReceived: totalDonationAmount,\n      donationsCount: totalDonations.length,\n      knownContacts: contactCount.length,\n      contactsAddedThisWeek: recentContacts.length,\n    };\n  }\n\n  // Payment intention methods\n  async createPaymentIntention(intention: InsertPaymentIntention): Promise<PaymentIntention> {\n    const [created] = await db\n      .insert(paymentIntentions)\n      .values(intention)\n      .returning();\n    return created;\n  }\n\n  async getPaymentIntentionByStripeLink(linkId: string): Promise<PaymentIntention | undefined> {\n    const [intention] = await db\n      .select()\n      .from(paymentIntentions)\n      .where(eq(paymentIntentions.stripePaymentLinkId, linkId));\n    return intention || undefined;\n  }\n\n  async updatePaymentIntentionStatus(id: string, status: string, sessionId?: string): Promise<PaymentIntention> {\n    const updateData: any = { status };\n    if (sessionId) {\n      updateData.stripeSessionId = sessionId;\n    }\n    if (status === 'paid') {\n      updateData.paidAt = new Date();\n    }\n\n    const [updated] = await db\n      .update(paymentIntentions)\n      .set(updateData)\n      .where(eq(paymentIntentions.id, id))\n      .returning();\n    return updated;\n  }\n\n  async getPaymentIntentionsBySender(senderEmail: string, targetEmail: string): Promise<PaymentIntention[]> {\n    return await db\n      .select()\n      .from(paymentIntentions)\n      .where(and(\n        eq(paymentIntentions.senderEmail, senderEmail),\n        eq(paymentIntentions.targetEmail, targetEmail)\n      ))\n      .orderBy(desc(paymentIntentions.createdAt));\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":13594},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, timestamp, decimal, boolean, json } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\nimport { relations } from \"drizzle-orm\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: text(\"email\").notNull().unique(),\n  gmailToken: text(\"gmail_token\"),\n  gmailRefreshToken: text(\"gmail_refresh_token\"),\n  stripeCustomerId: text(\"stripe_customer_id\"),\n  emailCheckInterval: decimal(\"email_check_interval\", { precision: 5, scale: 1 }).default(\"1.0\"), // in minutes\n  lastEmailCheck: timestamp(\"last_email_check\"),\n  charityName: text(\"charity_name\").default(\"Email Guardian\"),\n  useAiResponses: boolean(\"use_ai_responses\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const contacts = pgTable(\"contacts\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  email: text(\"email\").notNull(),\n  name: text(\"name\"),\n  isWhitelisted: boolean(\"is_whitelisted\").default(true),\n  addedAt: timestamp(\"added_at\").defaultNow(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const pendingEmails = pgTable(\"pending_emails\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  gmailMessageId: text(\"gmail_message_id\").notNull(),\n  sender: text(\"sender\").notNull(),\n  subject: text(\"subject\"),\n  snippet: text(\"snippet\"),\n  receivedAt: timestamp(\"received_at\").notNull(),\n  status: text(\"status\").notNull().default(\"pending\"), // pending, donation_sent, paid, released\n  donationLinkId: text(\"donation_link_id\"),\n  stripeSessionId: text(\"stripe_session_id\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const donations = pgTable(\"donations\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  pendingEmailId: varchar(\"pending_email_id\").references(() => pendingEmails.id, { onDelete: \"cascade\" }),\n  stripeSessionId: text(\"stripe_session_id\").notNull(),\n  amount: decimal(\"amount\", { precision: 10, scale: 2 }).notNull(),\n  senderEmail: text(\"sender_email\").notNull(),\n  status: text(\"status\").notNull().default(\"completed\"), // completed, refunded\n  paidAt: timestamp(\"paid_at\").defaultNow(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const emailStats = pgTable(\"email_stats\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  date: timestamp(\"date\").notNull(),\n  emailsFiltered: decimal(\"emails_filtered\", { precision: 10, scale: 0 }).default(\"0\"),\n  donationsReceived: decimal(\"donations_received\", { precision: 10, scale: 2 }).default(\"0.00\"),\n  pendingDonations: decimal(\"pending_donations\", { precision: 10, scale: 0 }).default(\"0\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const paymentIntentions = pgTable(\"payment_intentions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  senderEmail: text(\"sender_email\").notNull(),\n  targetEmail: text(\"target_email\").notNull(), // The user's email being contacted\n  stripePaymentLinkId: text(\"stripe_payment_link_id\").notNull(),\n  stripeSessionId: text(\"stripe_session_id\"),\n  amount: decimal(\"amount\", { precision: 10, scale: 2 }).default(\"1.00\"),\n  status: text(\"status\").notNull().default(\"pending\"), // pending, paid, cancelled\n  metadata: json(\"metadata\"), // Additional data like message context\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n  paidAt: timestamp(\"paid_at\"),\n});\n\n// Relations\nexport const usersRelations = relations(users, ({ many }) => ({\n  contacts: many(contacts),\n  pendingEmails: many(pendingEmails),\n  donations: many(donations),\n  emailStats: many(emailStats),\n  paymentIntentions: many(paymentIntentions),\n}));\n\nexport const contactsRelations = relations(contacts, ({ one }) => ({\n  user: one(users, {\n    fields: [contacts.userId],\n    references: [users.id],\n  }),\n}));\n\nexport const pendingEmailsRelations = relations(pendingEmails, ({ one }) => ({\n  user: one(users, {\n    fields: [pendingEmails.userId],\n    references: [users.id],\n  }),\n  donation: one(donations),\n}));\n\nexport const donationsRelations = relations(donations, ({ one }) => ({\n  user: one(users, {\n    fields: [donations.userId],\n    references: [users.id],\n  }),\n  pendingEmail: one(pendingEmails, {\n    fields: [donations.pendingEmailId],\n    references: [pendingEmails.id],\n  }),\n}));\n\nexport const emailStatsRelations = relations(emailStats, ({ one }) => ({\n  user: one(users, {\n    fields: [emailStats.userId],\n    references: [users.id],\n  }),\n}));\n\nexport const paymentIntentionsRelations = relations(paymentIntentions, ({ one }) => ({\n  user: one(users, {\n    fields: [paymentIntentions.userId],\n    references: [users.id],\n  }),\n}));\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertContactSchema = createInsertSchema(contacts).omit({\n  id: true,\n  addedAt: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertPendingEmailSchema = createInsertSchema(pendingEmails).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertDonationSchema = createInsertSchema(donations).omit({\n  id: true,\n  paidAt: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertEmailStatsSchema = createInsertSchema(emailStats).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertPaymentIntentionSchema = createInsertSchema(paymentIntentions).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n  paidAt: true,\n});\n\n// Types\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\n\nexport type Contact = typeof contacts.$inferSelect;\nexport type InsertContact = z.infer<typeof insertContactSchema>;\n\nexport type PendingEmail = typeof pendingEmails.$inferSelect;\nexport type InsertPendingEmail = z.infer<typeof insertPendingEmailSchema>;\n\nexport type Donation = typeof donations.$inferSelect;\nexport type InsertDonation = z.infer<typeof insertDonationSchema>;\n\nexport type EmailStats = typeof emailStats.$inferSelect;\nexport type InsertEmailStats = z.infer<typeof insertEmailStatsSchema>;\n\nexport type PaymentIntention = typeof paymentIntentions.$inferSelect;\nexport type InsertPaymentIntention = z.infer<typeof insertPaymentIntentionSchema>;\n","size_bytes":7164},"client/src/App.tsx":{"content":"import { Switch, Route, Redirect } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { AuthProvider, useAuth } from \"@/hooks/use-auth\";\nimport Dashboard from \"@/pages/dashboard\";\nimport EmailQueue from \"@/pages/email-queue\";\nimport Contacts from \"@/pages/contacts\";\nimport Donations from \"@/pages/donations\";\nimport Settings from \"@/pages/settings\";\nimport Setup from \"@/pages/setup\";\nimport SignIn from \"@/pages/signin\";\nimport Demo from \"@/pages/demo\";\nimport Checkout from \"@/pages/checkout\";\nimport BusinessWebsite from \"@/pages/business-website\";\nimport PaymentSuccess from \"@/pages/payment-success\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction ProtectedRoute({ component: Component }: { component: React.ComponentType }) {\n  const { isAuthenticated, isLoading } = useAuth();\n  \n  if (isLoading) {\n    return (\n      <div className=\"h-screen flex items-center justify-center\">\n        <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" />\n      </div>\n    );\n  }\n  \n  if (!isAuthenticated) {\n    return <Redirect to=\"/setup\" />;\n  }\n  \n  return <Component />;\n}\n\nfunction Router() {\n  const { isAuthenticated, isLoading } = useAuth();\n  \n  if (isLoading) {\n    return (\n      <div className=\"h-screen flex items-center justify-center\">\n        <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" />\n      </div>\n    );\n  }\n\n  return (\n    <Switch>\n      <Route path=\"/setup\" component={Setup} />\n      <Route path=\"/signin\" component={SignIn} />\n      <Route path=\"/demo\" component={Demo} />\n      <Route path=\"/checkout\" component={Checkout} />\n      <Route path=\"/business\" component={BusinessWebsite} />\n      <Route path=\"/payment-success\" component={PaymentSuccess} />\n      <Route path=\"/\">\n        {isAuthenticated ? <Dashboard /> : <Redirect to=\"/setup\" />}\n      </Route>\n      <Route path=\"/email-queue\">\n        <ProtectedRoute component={EmailQueue} />\n      </Route>\n      <Route path=\"/contacts\">\n        <ProtectedRoute component={Contacts} />\n      </Route>\n      <Route path=\"/donations\">\n        <ProtectedRoute component={Donations} />\n      </Route>\n      <Route path=\"/settings\">\n        <ProtectedRoute component={Settings} />\n      </Route>\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <AuthProvider>\n        <TooltipProvider>\n          <Toaster />\n          <Router />\n        </TooltipProvider>\n      </AuthProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":2786},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0, 0%, 100%);\n  --foreground: hsl(20, 14.3%, 4.1%);\n  --muted: hsl(60, 4.8%, 95.9%);\n  --muted-foreground: hsl(25, 5.3%, 44.7%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(20, 14.3%, 4.1%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(20, 14.3%, 4.1%);\n  --border: hsl(20, 5.9%, 90%);\n  --input: hsl(20, 5.9%, 90%);\n  --primary: hsl(215, 100%, 54%);\n  --primary-foreground: hsl(211, 100%, 99%);\n  --secondary: hsl(60, 4.8%, 95.9%);\n  --secondary-foreground: hsl(24, 9.8%, 10%);\n  --accent: hsl(60, 4.8%, 95.9%);\n  --accent-foreground: hsl(24, 9.8%, 10%);\n  --destructive: hsl(0, 84.2%, 60.2%);\n  --destructive-foreground: hsl(60, 9.1%, 97.8%);\n  --ring: hsl(20, 14.3%, 4.1%);\n  --radius: 0.5rem;\n}\n\n.dark {\n  --background: hsl(240, 10%, 3.9%);\n  --foreground: hsl(0, 0%, 98%);\n  --muted: hsl(240, 3.7%, 15.9%);\n  --muted-foreground: hsl(240, 5%, 64.9%);\n  --popover: hsl(240, 10%, 3.9%);\n  --popover-foreground: hsl(0, 0%, 98%);\n  --card: hsl(240, 10%, 3.9%);\n  --card-foreground: hsl(0, 0%, 98%);\n  --border: hsl(240, 3.7%, 15.9%);\n  --input: hsl(240, 3.7%, 15.9%);\n  --primary: hsl(215, 100%, 54%);\n  --primary-foreground: hsl(211, 100%, 99%);\n  --secondary: hsl(240, 3.7%, 15.9%);\n  --secondary-foreground: hsl(0, 0%, 98%);\n  --accent: hsl(240, 3.7%, 15.9%);\n  --accent-foreground: hsl(0, 0%, 98%);\n  --destructive: hsl(0, 62.8%, 30.6%);\n  --destructive-foreground: hsl(0, 0%, 98%);\n  --ring: hsl(240, 4.9%, 83.9%);\n  --radius: 0.5rem;\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/* Custom scrollbar */\n::-webkit-scrollbar {\n  width: 6px;\n}\n\n::-webkit-scrollbar-track {\n  background: hsl(60, 4.8%, 95.9%);\n}\n\n::-webkit-scrollbar-thumb {\n  background: hsl(20, 5.9%, 90%);\n  border-radius: 3px;\n}\n\n::-webkit-scrollbar-thumb:hover {\n  background: hsl(25, 5.3%, 44.7%);\n}\n\n/* Animation utilities */\n@keyframes pulse-slow {\n  0%, 100% {\n    opacity: 1;\n  }\n  50% {\n    opacity: 0.5;\n  }\n}\n\n.animate-pulse-slow {\n  animation: pulse-slow 2s ease-in-out infinite;\n}\n\n/* Text truncation utilities */\n.line-clamp-1 {\n  overflow: hidden;\n  display: -webkit-box;\n  -webkit-box-orient: vertical;\n  -webkit-line-clamp: 1;\n}\n\n.line-clamp-2 {\n  overflow: hidden;\n  display: -webkit-box;\n  -webkit-box-orient: vertical;\n  -webkit-line-clamp: 2;\n}\n\n/* Custom focus styles */\n.focus-visible:focus-visible {\n  outline: 2px solid hsl(215, 100%, 54%);\n  outline-offset: 2px;\n}\n\n/* Status badge variations */\n.status-pending {\n  background-color: hsl(0, 100%, 95%);\n  color: hsl(0, 84.2%, 60.2%);\n  border-color: hsl(0, 100%, 90%);\n}\n\n.status-donation-sent {\n  background-color: hsl(38, 100%, 95%);\n  color: hsl(32, 95%, 44%);\n  border-color: hsl(38, 100%, 90%);\n}\n\n.status-paid {\n  background-color: hsl(142, 76%, 95%);\n  color: hsl(142, 76%, 36%);\n  border-color: hsl(142, 76%, 90%);\n}\n\n.status-released {\n  background-color: hsl(215, 100%, 95%);\n  color: hsl(215, 100%, 54%);\n  border-color: hsl(215, 100%, 90%);\n}\n","size_bytes":3100},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"server/services/email-processor.ts":{"content":"import { storage } from '../storage';\nimport { gmailService } from './gmail';\nimport { AIService } from './ai-service';\nimport type { User } from '@shared/schema';\n\nexport class EmailProcessor {\n  private aiService: AIService;\n\n  constructor() {\n    try {\n      this.aiService = new AIService();\n    } catch (error) {\n      console.warn('AI service not available:', error);\n      this.aiService = null as any;\n    }\n  }\n\n  async processNewEmails(user: User): Promise<void> {\n    if (!user.gmailToken) {\n      throw new Error('User does not have Gmail token');\n    }\n\n    try {\n      // Calculate time range based on last check and current interval\n      const intervalMinutes = parseFloat(user.emailCheckInterval || \"1.0\");\n      const lastCheckTime = user.lastEmailCheck ? new Date(user.lastEmailCheck) : new Date(Date.now() - 24 * 60 * 60 * 1000); // Default to 24h ago if never checked\n      \n      // Format date for Gmail search (YYYY/MM/DD format)\n      const after = lastCheckTime.toISOString().split('T')[0].replace(/-/g, '/');\n      \n      // Get emails from the last check time, including unread and already read emails that might have been missed\n      // Exclude sent emails and emails from the user's own address to prevent processing auto-replies\n      const query = `after:${after} -label:spam -from:${user.email} -in:sent`;\n      const messages = await gmailService.getMessages(\n        user.gmailToken,\n        query,\n        50 // Increased limit to catch more emails during busy periods\n      );\n\n      console.log(`Found ${messages.length} messages since ${after} for user ${user.email}`);\n\n      for (const message of messages) {\n        if (!message.id) continue;\n        \n        await this.processMessage(user, message.id);\n      }\n    } catch (error: any) {\n      if (error.code === 401) {\n        // Token expired, try to refresh\n        if (user.gmailRefreshToken) {\n          const newTokens = await gmailService.refreshAccessToken(user.gmailRefreshToken);\n          if (newTokens.access_token) {\n            await storage.updateUserGmailTokens(user.id, newTokens.access_token, user.gmailRefreshToken);\n            // Retry processing\n            return this.processNewEmails(user);\n          }\n        }\n      }\n      throw error;\n    }\n  }\n\n  private async processMessage(user: User, messageId: string) {\n    const message = await gmailService.getMessage(user.gmailToken!, messageId);\n    \n    if (!message.payload?.headers) return;\n\n    const headers = message.payload.headers;\n    const fromHeader = gmailService.getHeaderValue(headers, 'From');\n    const senderEmail = gmailService.extractEmailAddress(fromHeader);\n    const subject = gmailService.getHeaderValue(headers, 'Subject');\n    const snippet = message.snippet || '';\n\n    console.log(`Processing email from: ${senderEmail}, subject: ${subject}`);\n\n    // Skip auto-reply emails from the system itself\n    if (senderEmail === user.email) {\n      console.log(`Skipping email from user's own email address: ${senderEmail}`);\n      return;\n    }\n\n    // Skip emails that are replies to auto-reply messages (containing \"Email Access Request\")\n    if (subject.includes('Email Access Request') || \n        subject.includes('Re: Re:') || \n        subject.match(/^Re:\\s+.*\\s+-\\s+Email Access Request/)) {\n      console.log(`Skipping auto-reply or duplicate reply: ${subject}`);\n      return;\n    }\n\n    // Skip bounce-back messages and delivery failure notifications\n    if (senderEmail.includes('mailer-daemon') || \n        senderEmail.includes('postmaster') ||\n        senderEmail.includes('no-reply') || \n        senderEmail.includes('noreply') ||\n        senderEmail.includes('daemon@') ||\n        senderEmail.includes('bounce') ||\n        senderEmail.toLowerCase().includes('delivery') ||\n        subject.toLowerCase().includes('delivery status notification') ||\n        subject.toLowerCase().includes('undelivered mail') ||\n        subject.toLowerCase().includes('address not found') ||\n        subject.toLowerCase().includes('message wasn') ||\n        subject.toLowerCase().includes('delivery failure') ||\n        subject.toLowerCase().includes('mail delivery failed') ||\n        snippet.toLowerCase().includes('address couldn\\'t be found') ||\n        snippet.toLowerCase().includes('wasn\\'t delivered') ||\n        snippet.toLowerCase().includes('delivery status notification')) {\n      console.log(`Skipping bounce-back/system email from: ${senderEmail}, subject: ${subject}`);\n      return;\n    }\n\n    // Check if sender is a known contact (whitelisted)\n    const existingContact = await storage.getContactByEmail(user.id, senderEmail);\n    if (existingContact && existingContact.isWhitelisted) {\n      console.log(`Email from ${senderEmail} is whitelisted, keeping in inbox`);\n      \n      // Add known contact label\n      const labels = await gmailService.getLabels(user.gmailToken!);\n      const knownContactsLabel = labels.find(l => l.name === 'Email Guardian/Known Contacts');\n      \n      if (knownContactsLabel?.id) {\n        await gmailService.addLabel(user.gmailToken!, messageId, knownContactsLabel.id);\n      }\n      \n      return;\n    }\n\n    // Check if we already have a pending email entry for this message\n    const existingPendingEmail = await storage.getPendingEmailByGmailId(user.id, messageId);\n    if (existingPendingEmail) {\n      console.log(`Email ${messageId} already processed as pending, skipping duplicate`);\n      return;\n    }\n\n    // Create pending email entry\n    const pendingEmail = await storage.createPendingEmail({\n      userId: user.id,\n      gmailMessageId: messageId,\n      sender: senderEmail,\n      subject: subject || '',\n      snippet: snippet,\n      receivedAt: new Date(parseInt(message.internalDate || '0')),\n      status: 'pending'\n    });\n\n    // Update pending email status\n    await storage.updatePendingEmailDonationLink(pendingEmail.id, 'manual-request');\n\n    // Add label to Gmail message\n    const labels = await gmailService.getLabels(user.gmailToken!);\n    const pendingLabel = labels.find(l => l.name === 'Email Guardian/Pending Donation');\n    \n    if (pendingLabel?.id) {\n      await gmailService.addLabel(user.gmailToken!, messageId, pendingLabel.id);\n    }\n\n    // Create dynamic Stripe payment link for the donation\n    try {\n      const paymentResponse = await fetch('http://localhost:5000/api/create-dynamic-payment-link', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          targetEmail: user.email,\n          senderEmail,\n          charityName: user.charityName || 'Email Guardian',\n          amount: 1.00 // $1 donation\n        })\n      });\n      \n      const paymentData = await paymentResponse.json();\n      \n      if (paymentData.paymentLink) {\n        // Update pending email with payment link\n        await storage.updatePendingEmailDonationLink(pendingEmail.id, paymentData.paymentLinkId);\n        \n        // Send auto-reply with donation request (AI or template based)\n        await this.sendDonationRequest(user, senderEmail, subject, snippet, paymentData.paymentLink);\n      } else {\n        console.error('Failed to create dynamic payment link:', paymentData.message);\n        // Fallback to regular payment link\n        const fallbackResponse = await fetch('http://localhost:5000/api/create-payment-link', {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({\n            amount: 1.00,\n            senderEmail,\n            pendingEmailId: pendingEmail.id,\n            userId: user.id\n          })\n        });\n        \n        const fallbackData = await fallbackResponse.json();\n        if (fallbackData.paymentUrl) {\n          await storage.updatePendingEmailDonationLink(pendingEmail.id, fallbackData.paymentLinkId);\n          await this.sendDonationRequest(user, senderEmail, subject, snippet, fallbackData.paymentUrl);\n        } else {\n          await this.sendDonationRequest(user, senderEmail, subject, snippet, 'Please contact us for payment instructions.');\n        }\n      }\n    } catch (error: any) {\n      console.error('Error creating payment link:', error.message);\n      // Fallback to manual donation request\n      await this.sendDonationRequest(user, senderEmail, subject, snippet, 'Please contact us for payment instructions.');\n    }\n    \n    // Remove from inbox since it's now pending donation\n    await gmailService.removeFromInbox(user.gmailToken!, messageId);\n\n    // Update stats\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n    \n    const stats = await storage.getEmailStats(user.id, today);\n    const currentFiltered = stats ? parseInt(stats.emailsFiltered || \"0\") : 0;\n    \n    await storage.createOrUpdateEmailStats(user.id, today, {\n      emailsFiltered: (currentFiltered + 1).toString()\n    });\n\n    console.log(`Successfully filtered email from ${senderEmail} and sent auto-reply`);\n  }\n\n  private async sendDonationRequest(user: User, senderEmail: string, originalSubject: string, emailContent: string, donationUrl: string) {\n    const subject = `Re: ${originalSubject} - Email Access Request`;\n    const charityName = user.charityName || 'Email Guardian';\n    \n    let body: string;\n    \n    // Use AI-generated response if enabled, otherwise use template\n    if (user.useAiResponses && this.aiService) {\n      try {\n        console.log(`Generating AI response for email from ${senderEmail}`);\n        const signature = user.useCustomSignature ? user.customSignature : undefined;\n        body = await this.aiService.generateContextualAutoReply(\n          senderEmail,\n          user.email,\n          originalSubject,\n          emailContent,\n          charityName,\n          donationUrl,\n          signature\n        );\n      } catch (error) {\n        console.error('Failed to generate AI response, falling back to template:', error);\n        const signature = user.useCustomSignature ? user.customSignature : undefined;\n        body = this.getTemplateResponse(charityName, donationUrl, signature);\n      }\n    } else {\n      const signature = user.useCustomSignature ? user.customSignature : undefined;\n      body = this.getTemplateResponse(charityName, donationUrl, signature);\n    }\n    \n    await gmailService.sendEmail(user.gmailToken!, senderEmail, subject, body);\n  }\n\n  private getTemplateResponse(charityName: string, donationUrl: string, customSignature?: string): string {\n    const signature = customSignature || \"Best regards,\\nEmail Guardian System\";\n    \n    return `\nHello,\n\nThank you for your email. To help manage my inbox and reduce spam, I use an email filtering system that requires a small $1 donation for unknown senders to ensure your message reaches me.\n\nThis one-time payment to ${charityName} grants you permanent access to my inbox for future emails.\n\nTo complete your donation and have your email delivered:\n\nComplete Your $1 Donation Here: ${donationUrl}\n\nOnce your payment is confirmed:\n- Your original email will be delivered to my inbox\n- You'll be added to my known contacts list for future emails\n- All future emails from you will bypass the filtering system\n\nThis filtering system helps reduce spam while ensuring legitimate emails reach me. Thank you for understanding and for supporting ${charityName}!\n\n${signature}\n    `.trim();\n  }\n\n  async processDonationComplete(senderEmail: string, userId: string) {\n    // Manual donation processing (for when payments are confirmed manually)\n    \n    // Add sender to contacts (whitelist them)\n    const existingContact = await storage.getContactByEmail(userId, senderEmail);\n    if (!existingContact) {\n      await storage.createContact({\n        userId: userId,\n        email: senderEmail,\n        isWhitelisted: true\n      });\n    }\n\n    // Get user for Gmail operations\n    const user = await storage.getUser(userId);\n    if (!user?.gmailToken) {\n      throw new Error('User Gmail token not found');\n    }\n\n    // Find pending emails from this sender\n    const pendingEmails = await storage.getPendingEmails(userId);\n    const senderPendingEmails = pendingEmails.filter(e => e.sender === senderEmail);\n\n    // Move all emails from this sender to inbox\n    for (const pendingEmail of senderPendingEmails) {\n      await gmailService.moveToInbox(user.gmailToken, pendingEmail.gmailMessageId);\n      \n      const labels = await gmailService.getLabels(user.gmailToken);\n      const knownContactsLabel = labels.find(l => l.name === 'Email Guardian/Known Contacts');\n      const pendingLabel = labels.find(l => l.name === 'Email Guardian/Pending Donation');\n      \n      if (knownContactsLabel?.id) {\n        await gmailService.addLabel(user.gmailToken, pendingEmail.gmailMessageId, knownContactsLabel.id);\n      }\n      \n      if (pendingLabel?.id) {\n        await gmailService.removeLabel(user.gmailToken, pendingEmail.gmailMessageId, pendingLabel.id);\n      }\n\n      // Update pending email status to \"paid\"\n      await storage.updatePendingEmailStatus(pendingEmail.id, 'paid');\n    }\n\n    console.log(`Processed donation completion for ${senderEmail}, moved ${senderPendingEmails.length} emails to inbox`);\n  }\n}\n\nexport const emailProcessor = new EmailProcessor();","size_bytes":13203},"server/services/gmail.ts":{"content":"import { google } from 'googleapis';\nimport { OAuth2Client } from 'google-auth-library';\n\nexport class GmailService {\n  private oauth2Client: OAuth2Client;\n\n  constructor() {\n    const clientId = process.env.GMAIL_CLIENT_ID;\n    const clientSecret = process.env.GMAIL_CLIENT_SECRET;\n    \n    // Use the Replit domain for OAuth redirect\n    const replitDomain = process.env.REPLIT_DOMAINS?.split(',')[0];\n    const redirectUri = replitDomain \n      ? `https://${replitDomain}/setup`\n      : process.env.OAUTH_REDIRECT_URI || 'http://localhost:5000/setup';\n\n    console.log('OAuth Redirect URI:', redirectUri);\n\n    if (!clientId || !clientSecret) {\n      console.warn('Gmail OAuth credentials not configured - service will be limited');\n      // Initialize with empty credentials to prevent crashes\n      this.oauth2Client = new OAuth2Client('', '', redirectUri);\n      return;\n    }\n\n    this.oauth2Client = new OAuth2Client(\n      clientId,\n      clientSecret,\n      redirectUri\n    );\n  }\n\n  getAuthUrl(): string {\n    return this.oauth2Client.generateAuthUrl({\n      access_type: 'offline',\n      scope: [\n        'https://www.googleapis.com/auth/gmail.readonly',\n        'https://www.googleapis.com/auth/gmail.labels',\n        'https://www.googleapis.com/auth/gmail.modify',\n        'https://www.googleapis.com/auth/gmail.send'\n      ],\n      prompt: 'consent'\n    });\n  }\n\n  async getTokens(code: string) {\n    const { tokens } = await this.oauth2Client.getToken(code);\n    return tokens;\n  }\n\n  async refreshAccessToken(refreshToken: string) {\n    this.oauth2Client.setCredentials({ refresh_token: refreshToken });\n    const { credentials } = await this.oauth2Client.refreshAccessToken();\n    return credentials;\n  }\n\n  async revokeTokens(refreshToken: string) {\n    this.oauth2Client.setCredentials({ refresh_token: refreshToken });\n    await this.oauth2Client.revokeCredentials();\n  }\n\n  private getGmailClient(accessToken: string) {\n    this.oauth2Client.setCredentials({ access_token: accessToken });\n    return google.gmail({ version: 'v1', auth: this.oauth2Client });\n  }\n\n  async createLabels(accessToken: string) {\n    const gmail = this.getGmailClient(accessToken);\n    \n    const labels = [\n      { \n        name: 'Email Guardian/Pending Donation'\n      },\n      { \n        name: 'Email Guardian/Known Contacts'\n      }\n    ];\n\n    const createdLabels = [];\n    for (const label of labels) {\n      try {\n        const response = await gmail.users.labels.create({\n          userId: 'me',\n          requestBody: label\n        });\n        createdLabels.push(response.data);\n      } catch (error: any) {\n        if (error.code !== 409) { // Label already exists\n          throw error;\n        }\n      }\n    }\n\n    return createdLabels;\n  }\n\n  async getLabels(accessToken: string) {\n    const gmail = this.getGmailClient(accessToken);\n    const response = await gmail.users.labels.list({ userId: 'me' });\n    return response.data.labels || [];\n  }\n\n  async getMessages(accessToken: string, query?: string, maxResults = 50) {\n    const gmail = this.getGmailClient(accessToken);\n    const response = await gmail.users.messages.list({\n      userId: 'me',\n      q: query,\n      maxResults\n    });\n    return response.data.messages || [];\n  }\n\n  async getMessage(accessToken: string, messageId: string) {\n    const gmail = this.getGmailClient(accessToken);\n    const response = await gmail.users.messages.get({\n      userId: 'me',\n      id: messageId,\n      format: 'full'\n    });\n    return response.data;\n  }\n\n  async addLabel(accessToken: string, messageId: string, labelId: string) {\n    const gmail = this.getGmailClient(accessToken);\n    await gmail.users.messages.modify({\n      userId: 'me',\n      id: messageId,\n      requestBody: {\n        addLabelIds: [labelId]\n      }\n    });\n  }\n\n  async removeLabel(accessToken: string, messageId: string, labelId: string) {\n    const gmail = this.getGmailClient(accessToken);\n    await gmail.users.messages.modify({\n      userId: 'me',\n      id: messageId,\n      requestBody: {\n        removeLabelIds: [labelId]\n      }\n    });\n  }\n\n  async moveToInbox(accessToken: string, messageId: string) {\n    const gmail = this.getGmailClient(accessToken);\n    await gmail.users.messages.modify({\n      userId: 'me',\n      id: messageId,\n      requestBody: {\n        addLabelIds: ['INBOX'],\n        removeLabelIds: ['SPAM']\n      }\n    });\n  }\n\n  async removeFromInbox(accessToken: string, messageId: string) {\n    const gmail = this.getGmailClient(accessToken);\n    await gmail.users.messages.modify({\n      userId: 'me',\n      id: messageId,\n      requestBody: {\n        removeLabelIds: ['INBOX']\n      }\n    });\n  }\n\n  async sendEmail(accessToken: string, to: string, subject: string, body: string) {\n    const gmail = this.getGmailClient(accessToken);\n    \n    const message = [\n      `To: ${to}`,\n      `Subject: ${subject}`,\n      'Content-Type: text/plain; charset=utf-8',\n      '',\n      body\n    ].join('\\n');\n\n    const encodedMessage = Buffer.from(message).toString('base64').replace(/\\+/g, '-').replace(/\\//g, '_').replace(/=+$/, '');\n\n    await gmail.users.messages.send({\n      userId: 'me',\n      requestBody: {\n        raw: encodedMessage\n      }\n    });\n  }\n\n  getHeaderValue(headers: any[], name: string): string {\n    const header = headers.find(h => h.name.toLowerCase() === name.toLowerCase());\n    return header?.value || '';\n  }\n\n  extractEmailAddress(fromHeader: string): string {\n    const match = fromHeader.match(/<(.+?)>/) || fromHeader.match(/(\\S+@\\S+)/);\n    return match ? match[1] : fromHeader;\n  }\n}\n\nexport const gmailService = new GmailService();","size_bytes":5626},"server/services/stripe.ts":{"content":"import Stripe from 'stripe';\n\nlet stripe: Stripe | null = null;\n\nif (process.env.STRIPE_SECRET_KEY) {\n  stripe = new Stripe(process.env.STRIPE_SECRET_KEY);\n}\n\nexport class StripeService {\n  async createPaymentLink(senderEmail: string, pendingEmailId: string): Promise<string> {\n    if (!stripe) {\n      throw new Error('Stripe is not configured. Please provide STRIPE_SECRET_KEY.');\n    }\n    \n    const paymentLink = await stripe.paymentLinks.create({\n      line_items: [{\n        price_data: {\n          currency: 'usd',\n          unit_amount: 100, // $1.00\n          product_data: {\n            name: 'Email Access Fee',\n            description: `Grant access to send emails to this inbox. Payment from: ${senderEmail}`,\n          },\n        },\n        quantity: 1,\n      }],\n      metadata: {\n        sender_email: senderEmail,\n        pending_email_id: pendingEmailId,\n      },\n      after_completion: {\n        type: 'redirect',\n        redirect: {\n          url: `${process.env.FRONTEND_URL || 'http://localhost:5000'}/donation-success`\n        }\n      },\n    });\n\n    return paymentLink.url;\n  }\n\n  async createCheckoutSession(senderEmail: string, pendingEmailId: string): Promise<{ sessionId: string; url: string }> {\n    if (!stripe) {\n      throw new Error('Stripe is not configured. Please provide STRIPE_SECRET_KEY.');\n    }\n    \n    const session = await stripe.checkout.sessions.create({\n      payment_method_types: ['card'],\n      line_items: [{\n        price_data: {\n          currency: 'usd',\n          unit_amount: 100, // $1.00\n          product_data: {\n            name: 'Email Access Fee',\n            description: `Grant access to send emails to this inbox`,\n          },\n        },\n        quantity: 1,\n      }],\n      mode: 'payment',\n      success_url: `${process.env.FRONTEND_URL || 'http://localhost:5000'}/donation-success?session_id={CHECKOUT_SESSION_ID}`,\n      cancel_url: `${process.env.FRONTEND_URL || 'http://localhost:5000'}/donation-cancelled`,\n      metadata: {\n        sender_email: senderEmail,\n        pending_email_id: pendingEmailId,\n      },\n      customer_email: senderEmail,\n    });\n\n    return {\n      sessionId: session.id,\n      url: session.url!\n    };\n  }\n\n  async getSession(sessionId: string): Promise<Stripe.Checkout.Session> {\n    if (!stripe) {\n      throw new Error('Stripe is not configured. Please provide STRIPE_SECRET_KEY.');\n    }\n    \n    return await stripe.checkout.sessions.retrieve(sessionId);\n  }\n\n  async constructEvent(body: string, signature: string): Promise<Stripe.Event> {\n    if (!stripe) {\n      throw new Error('Stripe is not configured. Please provide STRIPE_SECRET_KEY.');\n    }\n    \n    const webhookSecret = process.env.STRIPE_WEBHOOK_SECRET;\n    if (!webhookSecret) {\n      throw new Error('Missing STRIPE_WEBHOOK_SECRET');\n    }\n    \n    return stripe.webhooks.constructEvent(body, signature, webhookSecret);\n  }\n}\n\nexport const stripeService = new StripeService();\n","size_bytes":2949},"client/src/hooks/use-auth.tsx":{"content":"import { createContext, useContext, useEffect, useState } from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport { apiRequest } from '@/lib/queryClient';\n\ninterface User {\n  id: string;\n  email: string;\n  gmailAccessToken?: string;\n  gmailRefreshToken?: string;\n}\n\ninterface AuthContextType {\n  user: User | null;\n  isLoading: boolean;\n  isAuthenticated: boolean;\n  login: (user: User) => void;\n  logout: () => void;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport function AuthProvider({ children }: { children: React.ReactNode }) {\n  const [user, setUser] = useState<User | null>(null);\n  const [isInitialized, setIsInitialized] = useState(false);\n\n  // Check for stored user session on app start\n  useEffect(() => {\n    const storedUserId = localStorage.getItem('user_id');\n    if (storedUserId) {\n      // Try to validate the stored user\n      apiRequest('GET', `/api/user/${storedUserId}`)\n        .then(res => res.json())\n        .then(userData => {\n          setUser(userData);\n          setIsInitialized(true);\n        })\n        .catch(() => {\n          // Invalid stored user, clear it\n          localStorage.removeItem('user_id');\n          setIsInitialized(true);\n        });\n    } else {\n      setIsInitialized(true);\n    }\n  }, []);\n\n  const login = (userData: User) => {\n    setUser(userData);\n    localStorage.setItem('user_id', userData.id);\n  };\n\n  const logout = () => {\n    setUser(null);\n    localStorage.removeItem('user_id');\n  };\n\n  const isAuthenticated = !!user;\n  const isLoading = !isInitialized;\n\n  return (\n    <AuthContext.Provider value={{\n      user,\n      isLoading,\n      isAuthenticated,\n      login,\n      logout\n    }}>\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};","size_bytes":1962},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/contacts.tsx":{"content":"import { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useState } from \"react\";\nimport { Sidebar } from \"@/components/ui/sidebar\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { Plus, Trash2, User } from \"lucide-react\";\n\nexport default function Contacts() {\n  const [newContactEmail, setNewContactEmail] = useState(\"\");\n  const [newContactName, setNewContactName] = useState(\"\");\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const { toast } = useToast();\n  const { user } = useAuth();\n\n  const { data: contacts, isLoading } = useQuery({\n    queryKey: [\"/api/contacts\", user?.id],\n    queryFn: async () => {\n      if (!user?.id) throw new Error(\"User not authenticated\");\n      const res = await apiRequest(\"GET\", `/api/contacts?userId=${user.id}`);\n      return res.json();\n    },\n    enabled: !!user?.id\n  });\n\n  const addContactMutation = useMutation({\n    mutationFn: async (contactData: { email: string; name?: string }) => {\n      if (!user?.id) throw new Error(\"User not authenticated\");\n      const res = await apiRequest(\"POST\", \"/api/contacts\", {\n        userId: user.id,\n        email: contactData.email,\n        name: contactData.name || null,\n        isWhitelisted: true\n      });\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/contacts\", user?.id] });\n      setNewContactEmail(\"\");\n      setNewContactName(\"\");\n      setIsDialogOpen(false);\n      toast({\n        title: \"Contact Added\",\n        description: \"The contact has been successfully added to your whitelist.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to add contact\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  const deleteContactMutation = useMutation({\n    mutationFn: async (contactId: string) => {\n      await apiRequest(\"DELETE\", `/api/contacts/${contactId}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/contacts\", user?.id] });\n      toast({\n        title: \"Contact Removed\",\n        description: \"The contact has been removed from your whitelist.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to remove contact\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  const handleAddContact = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!newContactEmail.trim()) return;\n    \n    addContactMutation.mutate({\n      email: newContactEmail.trim(),\n      name: newContactName.trim() || undefined\n    });\n  };\n\n  return (\n    <Sidebar>\n      <div className=\"min-h-screen bg-gray-50\">\n        {/* Header */}\n        <div className=\"bg-white border-b px-4 py-6 sm:px-6 lg:px-8\">\n          <div>\n            <h1 className=\"text-2xl font-bold text-gray-900\">Known Contacts</h1>\n            <p className=\"text-sm text-gray-600 mt-1\">\n              Manage your email whitelist and trusted senders\n            </p>\n          </div>\n        </div>\n        \n        <div className=\"p-4 sm:p-6 lg:p-8\">\n          <Card>\n            <CardHeader className=\"space-y-4 sm:space-y-0 sm:flex sm:flex-row sm:items-center sm:justify-between\">\n              <CardTitle className=\"text-lg sm:text-xl\">Contact Management</CardTitle>\n              <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n                <DialogTrigger asChild>\n                  <Button size=\"sm\" className=\"w-full sm:w-auto\" data-testid=\"button-add-contact\">\n                    <Plus className=\"mr-2\" size={16} />\n                    Add Contact\n                  </Button>\n                </DialogTrigger>\n                <DialogContent>\n                  <DialogHeader>\n                    <DialogTitle>Add New Contact</DialogTitle>\n                  </DialogHeader>\n                  <form onSubmit={handleAddContact} className=\"space-y-4\">\n                    <div>\n                      <Label htmlFor=\"email\">Email Address *</Label>\n                      <Input\n                        id=\"email\"\n                        type=\"email\"\n                        value={newContactEmail}\n                        onChange={(e) => setNewContactEmail(e.target.value)}\n                        placeholder=\"contact@example.com\"\n                        required\n                      />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"name\">Name (optional)</Label>\n                      <Input\n                        id=\"name\"\n                        value={newContactName}\n                        onChange={(e) => setNewContactName(e.target.value)}\n                        placeholder=\"Contact Name\"\n                      />\n                    </div>\n                    <div className=\"flex justify-end space-x-2\">\n                      <Button type=\"button\" variant=\"outline\" onClick={() => setIsDialogOpen(false)}>\n                        Cancel\n                      </Button>\n                      <Button type=\"submit\" disabled={addContactMutation.isPending}>\n                        {addContactMutation.isPending ? \"Adding...\" : \"Add Contact\"}\n                      </Button>\n                    </div>\n                  </form>\n                </DialogContent>\n              </Dialog>\n            </CardHeader>\n            <CardContent>\n              {isLoading ? (\n                <div className=\"space-y-4\">\n                  {[1, 2, 3, 4, 5].map(i => (\n                    <div key={i} className=\"animate-pulse flex items-center justify-between p-4 bg-gray-50 rounded-lg\">\n                      <div className=\"flex items-center space-x-3\">\n                        <div className=\"w-10 h-10 bg-gray-200 rounded-full\"></div>\n                        <div>\n                          <div className=\"h-4 bg-gray-200 rounded w-48 mb-2\"></div>\n                          <div className=\"h-3 bg-gray-200 rounded w-32\"></div>\n                        </div>\n                      </div>\n                      <div className=\"w-8 h-8 bg-gray-200 rounded\"></div>\n                    </div>\n                  ))}\n                </div>\n              ) : (\n                <div className=\"space-y-4\">\n                  {contacts?.length === 0 ? (\n                    <div className=\"text-center py-8\">\n                      <User className=\"mx-auto h-12 w-12 text-gray-400 mb-4\" />\n                      <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No contacts yet</h3>\n                      <p className=\"text-gray-500 mb-4\">Start by adding your trusted email contacts to the whitelist.</p>\n                      <Button onClick={() => setIsDialogOpen(true)}>\n                        <Plus className=\"mr-2\" size={16} />\n                        Add First Contact\n                      </Button>\n                    </div>\n                  ) : (\n                    contacts?.map((contact: any) => (\n                      <div key={contact.id} className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between p-4 bg-gray-50 rounded-lg border hover:bg-gray-100 transition-colors space-y-3 sm:space-y-0\">\n                        <div className=\"flex items-center space-x-3\">\n                          <div className=\"w-10 h-10 bg-blue-100 rounded-full flex items-center justify-center flex-shrink-0\">\n                            <User className=\"text-blue-600\" size={20} />\n                          </div>\n                          <div className=\"min-w-0 flex-1\">\n                            <p className=\"font-medium text-gray-900 truncate\">{contact.email}</p>\n                            {contact.name && (\n                              <p className=\"text-sm text-gray-500 truncate\">{contact.name}</p>\n                            )}\n                            <p className=\"text-xs text-gray-400\">\n                              Added {new Date(contact.addedAt).toLocaleDateString()}\n                            </p>\n                          </div>\n                        </div>\n                        <div className=\"flex items-center justify-between sm:justify-end space-x-3\">\n                          {contact.isWhitelisted && (\n                            <Badge variant=\"secondary\" className=\"bg-green-100 text-green-700 text-xs\">\n                              Whitelisted\n                            </Badge>\n                          )}\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => deleteContactMutation.mutate(contact.id)}\n                            disabled={deleteContactMutation.isPending}\n                            className=\"text-red-600 hover:text-red-700 hover:bg-red-50 flex-shrink-0\"\n                          >\n                            <Trash2 size={16} />\n                          </Button>\n                        </div>\n                      </div>\n                    ))\n                  )}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </Sidebar>\n  );\n}\n","size_bytes":9608},"client/src/pages/dashboard.tsx":{"content":"import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useState } from \"react\";\nimport { Sidebar } from \"@/components/ui/sidebar\";\nimport { StatsCard } from \"@/components/ui/stats-card\";\nimport { EmailItem } from \"@/components/ui/email-item\";\nimport { DonationItem } from \"@/components/ui/donation-item\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger, DialogDescription } from \"@/components/ui/dialog\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { \n  Filter, \n  Clock, \n  DollarSign, \n  Users, \n  UserPlus, \n  CheckCircle,\n  RotateCcw,\n  Heart,\n  Play\n} from \"lucide-react\";\n\nexport default function Dashboard() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [contactDialogOpen, setContactDialogOpen] = useState(false);\n  const [intervalDialogOpen, setIntervalDialogOpen] = useState(false);\n  const [charityDialogOpen, setCharityDialogOpen] = useState(false);\n  const [newContactEmail, setNewContactEmail] = useState(\"\");\n  const [newInterval, setNewInterval] = useState(user?.emailCheckInterval || \"1.0\");\n  const [newCharityName, setNewCharityName] = useState(user?.charityName || \"Email Guardian\");\n\n  // Manual sync mutation\n  const manualSyncMutation = useMutation({\n    mutationFn: async () => {\n      const res = await apiRequest(\"POST\", \"/api/manual-sync\");\n      return res.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Email filtering started\",\n        description: \"Checking for new emails now...\",\n      });\n      // Refresh dashboard stats\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/stats\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Sync failed\",\n        description: error.message || \"Could not start manual sync\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  // Add contact mutation\n  const addContactMutation = useMutation({\n    mutationFn: async (email: string) => {\n      const res = await apiRequest(\"POST\", \"/api/contacts\", {\n        email: email.trim(),\n        isWhitelisted: true\n      });\n      return res.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Contact added\",\n        description: `${newContactEmail} has been whitelisted`,\n      });\n      setNewContactEmail(\"\");\n      setContactDialogOpen(false);\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/stats\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Failed to add contact\",\n        description: error.message || \"Could not add contact\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  // Update interval mutation\n  const updateIntervalMutation = useMutation({\n    mutationFn: async (interval: string) => {\n      const res = await apiRequest(\"PUT\", `/api/user/${user?.id}/email-interval`, {\n        emailCheckInterval: parseFloat(interval)\n      });\n      return res.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Interval updated\",\n        description: `Email checking interval set to ${newInterval} minutes`,\n      });\n      setIntervalDialogOpen(false);\n      queryClient.invalidateQueries({ queryKey: [\"/api/user\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Failed to update interval\",\n        description: error.message || \"Could not update interval\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  // Update charity name mutation\n  const updateCharityMutation = useMutation({\n    mutationFn: async (charityName: string) => {\n      const res = await apiRequest(\"PUT\", `/api/user/${user?.id}/charity-name`, {\n        charityName: charityName.trim()\n      });\n      return res.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Charity name updated\",\n        description: `Charity name set to \"${newCharityName}\"`,\n      });\n      setCharityDialogOpen(false);\n      queryClient.invalidateQueries({ queryKey: [\"/api/user\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Failed to update charity name\", \n        description: error.message || \"Could not update charity name\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  const handleManualSync = () => {\n    manualSyncMutation.mutate();\n  };\n\n  const handleAddContact = () => {\n    if (!newContactEmail.trim()) {\n      toast({\n        title: \"Email required\",\n        description: \"Please enter a valid email address\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    addContactMutation.mutate(newContactEmail);\n  };\n\n  const handleUpdateInterval = () => {\n    updateIntervalMutation.mutate(newInterval);\n  };\n\n  const handleUpdateCharity = () => {\n    if (!newCharityName.trim()) {\n      toast({\n        title: \"Charity name required\",\n        description: \"Please enter a charity name\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    updateCharityMutation.mutate(newCharityName);\n  };\n\n  const { data: stats, isLoading: statsLoading } = useQuery({\n    queryKey: [\"/api/dashboard/stats\", user?.id],\n    queryFn: async () => {\n      const res = await apiRequest(\"GET\", `/api/dashboard/stats?userId=${user?.id}`);\n      return res.json();\n    },\n    enabled: !!user?.id\n  });\n\n  const { data: pendingEmails, isLoading: emailsLoading } = useQuery({\n    queryKey: [\"/api/pending-emails\", user?.id],\n    queryFn: async () => {\n      const res = await apiRequest(\"GET\", `/api/pending-emails?userId=${user?.id}`);\n      return res.json();\n    },\n    enabled: !!user?.id\n  });\n\n  const { data: recentDonations, isLoading: donationsLoading } = useQuery({\n    queryKey: [\"/api/donations/recent\", user?.id],\n    queryFn: async () => {\n      const res = await apiRequest(\"GET\", `/api/donations/recent?userId=${user?.id}&limit=5`);\n      return res.json();\n    },\n    enabled: !!user?.id\n  });\n\n  if (statsLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" />\n      </div>\n    );\n  }\n\n  return (\n    <Sidebar>\n      <div className=\"min-h-screen bg-gray-50\">\n        {/* Header */}\n        <div className=\"bg-white border-b px-4 py-6 sm:px-6 lg:px-8\">\n          <div>\n            <h1 className=\"text-2xl font-bold text-gray-900\">Dashboard</h1>\n            <p className=\"text-sm text-gray-600 mt-1\">\n              Monitor your email filtering and donation system ‚Ä¢ Connected: {user?.email}\n            </p>\n          </div>\n        </div>\n        \n        <div className=\"p-4 sm:p-6 lg:p-8\">\n          {/* Stats Cards */}\n          <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 sm:gap-6 mb-6 sm:mb-8\">\n            <StatsCard\n              title=\"Emails Filtered Today\"\n              value={stats?.emailsFiltered || 0}\n              icon={Filter}\n              iconColor=\"text-blue-600\"\n              iconBg=\"bg-blue-50\"\n              trend={\n                stats?.emailsFilteredYesterday > 0 \n                  ? `${Math.round(((stats?.emailsFiltered || 0) - stats?.emailsFilteredYesterday) / stats?.emailsFilteredYesterday * 100)}%`\n                  : stats?.emailsFiltered > 0 ? \"+100%\" : \"0%\"\n              }\n              trendText=\"from yesterday\"\n              trendType={\n                (stats?.emailsFiltered || 0) >= (stats?.emailsFilteredYesterday || 0) ? \"positive\" : \"negative\"\n              }\n            />\n            \n            <StatsCard\n              title=\"Pending Donations\"\n              value={stats?.pendingDonations || 0}\n              icon={Clock}\n              iconColor=\"text-orange-600\"\n              iconBg=\"bg-orange-50\"\n              subtext={`$${(stats?.pendingDonationsRevenue || 0).toFixed(2)} potential revenue`}\n            />\n            \n            <StatsCard\n              title=\"Donations Received\"\n              value={`$${(stats?.donationsReceived || 0).toFixed(2)}`}\n              icon={DollarSign}\n              iconColor=\"text-green-600\"\n              iconBg=\"bg-green-50\"\n              subtext={`${stats?.donationsCount || 0} successful donations this month`}\n            />\n            \n            <div className=\"relative\">\n              <StatsCard\n                title=\"Known Contacts\"\n                value={stats?.knownContacts || 0}\n                icon={Users}\n                iconColor=\"text-purple-600\"\n                iconBg=\"bg-purple-50\"\n                trend={\n                  stats?.contactsAddedThisWeek > 0 \n                    ? `+${stats?.contactsAddedThisWeek} added`\n                    : \"No new contacts\"\n                }\n                trendText=\"this week\"\n                trendType={stats?.contactsAddedThisWeek > 0 ? \"positive\" : \"neutral\"}\n              />\n              <Dialog open={contactDialogOpen} onOpenChange={setContactDialogOpen}>\n                <DialogTrigger asChild>\n                  <Button \n                    size=\"sm\"\n                    className=\"absolute bottom-4 right-4 h-8 w-8 p-0 bg-blue-600 hover:bg-blue-700\"\n                    data-testid=\"button-add-contact\"\n                  >\n                    <UserPlus size={16} />\n                  </Button>\n                </DialogTrigger>\n                <DialogContent>\n                  <DialogHeader>\n                    <DialogTitle>Add Contact</DialogTitle>\n                    <DialogDescription>\n                      Add an email address to your whitelist so their messages go directly to your inbox.\n                    </DialogDescription>\n                  </DialogHeader>\n                  <div className=\"space-y-4\">\n                    <div>\n                      <Label htmlFor=\"email\">Email Address</Label>\n                      <Input\n                        id=\"email\"\n                        type=\"email\"\n                        placeholder=\"contact@example.com\"\n                        value={newContactEmail}\n                        onChange={(e) => setNewContactEmail(e.target.value)}\n                        data-testid=\"input-contact-email\"\n                      />\n                    </div>\n                    <div className=\"flex justify-end space-x-2\">\n                      <Button variant=\"outline\" onClick={() => setContactDialogOpen(false)}>\n                        Cancel\n                      </Button>\n                      <Button onClick={handleAddContact} data-testid=\"button-save-contact\">\n                        Add Contact\n                      </Button>\n                    </div>\n                  </div>\n                </DialogContent>\n              </Dialog>\n            </div>\n          </div>\n\n          {/* Email Queue and Recent Donations */}\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8 mb-8\">\n            {/* Pending Email Queue */}\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between\">\n                <CardTitle>Pending Email Queue</CardTitle>\n                <Badge variant=\"secondary\" className=\"bg-orange-100 text-orange-700\">\n                  {stats?.pendingDonations || 0} waiting\n                </Badge>\n              </CardHeader>\n              <CardContent>\n                {emailsLoading ? (\n                  <div className=\"space-y-4\">\n                    {[1, 2, 3].map(i => (\n                      <div key={i} className=\"animate-pulse p-4 bg-gray-50 rounded-lg\">\n                        <div className=\"h-4 bg-gray-200 rounded w-3/4 mb-2\"></div>\n                        <div className=\"h-3 bg-gray-200 rounded w-1/2\"></div>\n                      </div>\n                    ))}\n                  </div>\n                ) : (\n                  <div className=\"space-y-4\">\n                    {pendingEmails?.slice(0, 3).map((email: any) => (\n                      <EmailItem key={email.id} email={email} />\n                    ))}\n                    \n                    <Button variant=\"outline\" className=\"w-full\">\n                      View All Pending Emails\n                    </Button>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n\n            {/* Recent Donations */}\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between\">\n                <CardTitle>Recent Donations</CardTitle>\n                <span className=\"text-sm text-gray-500\">Last 24 hours</span>\n              </CardHeader>\n              <CardContent>\n                {donationsLoading ? (\n                  <div className=\"space-y-4\">\n                    {[1, 2, 3].map(i => (\n                      <div key={i} className=\"animate-pulse flex items-center justify-between\">\n                        <div className=\"flex items-center space-x-3\">\n                          <div className=\"w-8 h-8 bg-gray-200 rounded-full\"></div>\n                          <div>\n                            <div className=\"h-4 bg-gray-200 rounded w-32 mb-1\"></div>\n                            <div className=\"h-3 bg-gray-200 rounded w-20\"></div>\n                          </div>\n                        </div>\n                        <div className=\"h-4 bg-gray-200 rounded w-12\"></div>\n                      </div>\n                    ))}\n                  </div>\n                ) : (\n                  <div className=\"space-y-4\">\n                    {recentDonations?.map((donation: any) => (\n                      <DonationItem key={donation.id} donation={donation} />\n                    ))}\n                    \n                    <div className=\"pt-4 border-t border-gray-200\">\n                      <div className=\"flex items-center justify-between text-sm\">\n                        <span className=\"text-gray-500\">Total Today:</span>\n                        <span className=\"font-semibold text-gray-900\">\n                          ${recentDonations?.reduce((sum: number, d: any) => sum + parseFloat(d.amount), 0).toFixed(2) || '0.00'}\n                        </span>\n                      </div>\n                    </div>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n\n\n\n          {/* System Status */}\n          <Card>\n            <CardHeader>\n              <CardTitle>System Status</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                <Button \n                  variant=\"outline\" \n                  className=\"flex flex-col items-center space-y-3 p-6 h-auto\"\n                  onClick={handleManualSync}\n                  data-testid=\"button-manual-sync\"\n                >\n                  <div className=\"w-12 h-12 bg-green-50 rounded-full flex items-center justify-center\">\n                    <Play className=\"text-green-600\" size={24} />\n                  </div>\n                  <div className=\"text-center\">\n                    <p className=\"font-medium text-gray-900\">Gmail API</p>\n                    <p className=\"text-sm text-green-600\">Run Filter Now</p>\n                  </div>\n                </Button>\n\n                <Dialog open={intervalDialogOpen} onOpenChange={setIntervalDialogOpen}>\n                  <DialogTrigger asChild>\n                    <Button \n                      variant=\"outline\" \n                      className=\"flex flex-col items-center space-y-3 p-6 h-auto\"\n                      data-testid=\"button-edit-interval\"\n                    >\n                      <div className=\"w-12 h-12 bg-blue-50 rounded-full flex items-center justify-center\">\n                        <RotateCcw className=\"text-blue-600\" size={24} />\n                      </div>\n                      <div className=\"text-center\">\n                        <p className=\"font-medium text-gray-900\">Auto-Sync</p>\n                        <p className=\"text-sm text-blue-600\">Every {user?.emailCheckInterval || 1} min</p>\n                      </div>\n                    </Button>\n                  </DialogTrigger>\n                  <DialogContent>\n                    <DialogHeader>\n                      <DialogTitle>Email Check Interval</DialogTitle>\n                      <DialogDescription>\n                        Configure how often the system should check for new emails to filter.\n                      </DialogDescription>\n                    </DialogHeader>\n                    <div className=\"space-y-4\">\n                      <div>\n                        <Label htmlFor=\"interval\">Check Emails Every</Label>\n                        <Select value={newInterval} onValueChange={setNewInterval}>\n                          <SelectTrigger data-testid=\"select-interval\">\n                            <SelectValue />\n                          </SelectTrigger>\n                          <SelectContent>\n                            <SelectItem value=\"0.5\">30 seconds</SelectItem>\n                            <SelectItem value=\"1.0\">1 minute</SelectItem>\n                            <SelectItem value=\"5.0\">5 minutes</SelectItem>\n                            <SelectItem value=\"15.0\">15 minutes</SelectItem>\n                            <SelectItem value=\"30.0\">30 minutes</SelectItem>\n                            <SelectItem value=\"60.0\">1 hour</SelectItem>\n                          </SelectContent>\n                        </Select>\n                      </div>\n                      <div className=\"flex justify-end space-x-2\">\n                        <Button variant=\"outline\" onClick={() => setIntervalDialogOpen(false)}>\n                          Cancel\n                        </Button>\n                        <Button onClick={handleUpdateInterval} data-testid=\"button-save-interval\">\n                          Update Interval\n                        </Button>\n                      </div>\n                    </div>\n                  </DialogContent>\n                </Dialog>\n\n                <Dialog open={charityDialogOpen} onOpenChange={setCharityDialogOpen}>\n                  <DialogTrigger asChild>\n                    <Button \n                      variant=\"outline\" \n                      className=\"flex flex-col items-center space-y-3 p-6 h-auto\"\n                      data-testid=\"button-edit-charity\"\n                    >\n                      <div className=\"w-12 h-12 bg-purple-50 rounded-full flex items-center justify-center\">\n                        <Heart className=\"text-purple-600\" size={24} />\n                      </div>\n                      <div className=\"text-center\">\n                        <p className=\"font-medium text-gray-900\">Charity</p>\n                        <p className=\"text-sm text-purple-600\">{user?.charityName || 'Email Guardian'}</p>\n                      </div>\n                    </Button>\n                  </DialogTrigger>\n                  <DialogContent>\n                    <DialogHeader>\n                      <DialogTitle>Update Charity Name</DialogTitle>\n                      <DialogDescription>\n                        Set the charity name that appears in donation requests sent to unknown senders.\n                      </DialogDescription>\n                    </DialogHeader>\n                    <div className=\"space-y-4\">\n                      <div>\n                        <Label htmlFor=\"charityName\">Charity Name</Label>\n                        <Input\n                          id=\"charityName\"\n                          type=\"text\"\n                          placeholder=\"Your Charity Name\"\n                          value={newCharityName}\n                          onChange={(e) => setNewCharityName(e.target.value)}\n                          data-testid=\"input-charity-name\"\n                        />\n                      </div>\n                      <div className=\"flex justify-end space-x-2\">\n                        <Button variant=\"outline\" onClick={() => setCharityDialogOpen(false)}>\n                          Cancel\n                        </Button>\n                        <Button onClick={handleUpdateCharity} data-testid=\"button-save-charity\">\n                          Update Name\n                        </Button>\n                      </div>\n                    </div>\n                  </DialogContent>\n                </Dialog>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </Sidebar>\n  );\n}\n","size_bytes":20766},"client/src/pages/demo.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useLocation } from \"wouter\";\nimport { Shield, Mail, CheckCircle, ArrowRight, User } from \"lucide-react\";\n\n// Mock user data for demo\nconst DEMO_USER = {\n  id: \"demo-user-123\",\n  email: \"demo@example.com\",\n  gmailAccessToken: \"demo-token\",\n  gmailRefreshToken: \"demo-refresh\"\n};\n\nexport default function Demo() {\n  const [, setLocation] = useLocation();\n  const { login } = useAuth();\n  const [isLoading, setIsLoading] = useState(false);\n\n  const handleStartDemo = () => {\n    setIsLoading(true);\n    \n    // Simulate login delay\n    setTimeout(() => {\n      login(DEMO_USER);\n      setLocation(\"/\");\n      setIsLoading(false);\n    }, 1500);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 flex items-center justify-center p-4\">\n      <div className=\"w-full max-w-2xl\">\n        {/* Header */}\n        <div className=\"text-center mb-8\">\n          <div className=\"w-16 h-16 bg-orange-500 rounded-2xl flex items-center justify-center mx-auto mb-4\">\n            <User className=\"text-white\" size={32} />\n          </div>\n          <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">Try Email Guardian Demo</h1>\n          <p className=\"text-gray-600 text-lg\">\n            Explore the full interface with sample data\n          </p>\n        </div>\n\n        {/* Demo Card */}\n        <Card className=\"mb-8\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center space-x-2\">\n              <Shield className=\"text-orange-500\" size={24} />\n              <span>Demo Mode</span>\n              <Badge variant=\"secondary\" className=\"ml-2\">No Gmail Required</Badge>\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-6\">\n            <Alert>\n              <CheckCircle className=\"h-4 w-4\" />\n              <AlertDescription>\n                Demo mode lets you explore all features with sample data. No Gmail account or API keys needed!\n              </AlertDescription>\n            </Alert>\n\n            <div className=\"space-y-4\">\n              <div className=\"bg-gray-50 p-4 rounded-lg\">\n                <h3 className=\"font-medium text-gray-900 mb-2\">What you'll see in demo mode:</h3>\n                <ul className=\"text-sm text-gray-600 space-y-1\">\n                  <li>‚Ä¢ Sample filtered emails waiting for donations</li>\n                  <li>‚Ä¢ Mock donation transactions and earnings</li>\n                  <li>‚Ä¢ Contact management interface</li>\n                  <li>‚Ä¢ Dashboard with analytics and metrics</li>\n                  <li>‚Ä¢ Complete settings and configuration pages</li>\n                </ul>\n              </div>\n\n              <Button \n                onClick={handleStartDemo}\n                disabled={isLoading}\n                className=\"w-full bg-orange-500 hover:bg-orange-600 text-white py-3\"\n                size=\"lg\"\n              >\n                {isLoading ? (\n                  <>\n                    <div className=\"animate-spin w-4 h-4 border-2 border-white border-t-transparent rounded-full mr-2\" />\n                    Loading Demo...\n                  </>\n                ) : (\n                  <>\n                    <User className=\"mr-2\" size={16} />\n                    Start Demo\n                    <ArrowRight className=\"ml-2\" size={16} />\n                  </>\n                )}\n              </Button>\n\n              <div className=\"text-center\">\n                <Button \n                  variant=\"outline\"\n                  onClick={() => setLocation(\"/setup\")}\n                  className=\"text-sm\"\n                >\n                  <Mail className=\"mr-2\" size={14} />\n                  Set up real Gmail integration instead\n                </Button>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Info */}\n        <div className=\"text-center text-sm text-gray-500\">\n          <p>Demo data resets when you refresh the page</p>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":4307},"client/src/pages/donations.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Sidebar } from \"@/components/ui/sidebar\";\nimport { DonationItem } from \"@/components/ui/donation-item\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { DollarSign } from \"lucide-react\";\n\nexport default function Donations() {\n  const { user } = useAuth();\n  \n  const { data: donations, isLoading } = useQuery({\n    queryKey: [\"/api/donations\", user?.id],\n    queryFn: async () => {\n      if (!user?.id) return [];\n      const res = await apiRequest(\"GET\", `/api/donations?userId=${user.id}`);\n      return res.json();\n    },\n    enabled: !!user?.id\n  });\n\n  const totalAmount = donations?.reduce((sum: number, donation: any) => \n    sum + parseFloat(donation.amount), 0) || 0;\n\n  const thisMonth = donations?.filter((d: any) => {\n    const donationDate = new Date(d.paidAt);\n    const now = new Date();\n    return donationDate.getMonth() === now.getMonth() && \n           donationDate.getFullYear() === now.getFullYear();\n  }) || [];\n\n  const thisMonthAmount = thisMonth.reduce((sum: number, donation: any) => \n    sum + parseFloat(donation.amount), 0);\n\n  return (\n    <Sidebar>\n      <div className=\"min-h-screen bg-gray-50\">\n        {/* Header */}\n        <div className=\"bg-white border-b px-4 py-6 sm:px-6 lg:px-8\">\n          <div>\n            <h1 className=\"text-2xl font-bold text-gray-900\">Donations</h1>\n            <p className=\"text-sm text-gray-600 mt-1\">\n              Track all received donations and revenue\n            </p>\n          </div>\n        </div>\n        \n        <div className=\"p-4 sm:p-6 lg:p-8\">\n          {/* Summary Cards */}\n          <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4 sm:gap-6 mb-6 sm:mb-8\">\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-gray-500 text-sm font-medium\">Total Revenue</p>\n                    <p className=\"text-3xl font-bold text-gray-900\">${totalAmount.toFixed(2)}</p>\n                  </div>\n                  <div className=\"w-12 h-12 bg-green-50 rounded-lg flex items-center justify-center\">\n                    <DollarSign className=\"text-green-600\" size={24} />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-gray-500 text-sm font-medium\">This Month</p>\n                    <p className=\"text-3xl font-bold text-gray-900\">${thisMonthAmount.toFixed(2)}</p>\n                  </div>\n                  <div className=\"w-12 h-12 bg-blue-50 rounded-lg flex items-center justify-center\">\n                    <DollarSign className=\"text-blue-600\" size={24} />\n                  </div>\n                </div>\n                <p className=\"text-sm text-gray-500 mt-2\">{thisMonth.length} donations</p>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-gray-500 text-sm font-medium\">Average Donation</p>\n                    <p className=\"text-3xl font-bold text-gray-900\">\n                      ${donations?.length ? (totalAmount / donations.length).toFixed(2) : '0.00'}\n                    </p>\n                  </div>\n                  <div className=\"w-12 h-12 bg-purple-50 rounded-lg flex items-center justify-center\">\n                    <DollarSign className=\"text-purple-600\" size={24} />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Donations List */}\n          <Card>\n            <CardHeader className=\"space-y-2 sm:space-y-0 sm:flex sm:flex-row sm:items-center sm:justify-between\">\n              <CardTitle className=\"text-lg sm:text-xl\">All Donations</CardTitle>\n              <Badge variant=\"secondary\" className=\"w-fit\">\n                {donations?.length || 0} total\n              </Badge>\n            </CardHeader>\n            <CardContent>\n              {isLoading ? (\n                <div className=\"space-y-4\">\n                  {[1, 2, 3, 4, 5].map(i => (\n                    <div key={i} className=\"animate-pulse flex items-center justify-between p-4 bg-gray-50 rounded-lg\">\n                      <div className=\"flex items-center space-x-3\">\n                        <div className=\"w-8 h-8 bg-gray-200 rounded-full\"></div>\n                        <div>\n                          <div className=\"h-4 bg-gray-200 rounded w-48 mb-2\"></div>\n                          <div className=\"h-3 bg-gray-200 rounded w-32\"></div>\n                        </div>\n                      </div>\n                      <div className=\"h-4 bg-gray-200 rounded w-16\"></div>\n                    </div>\n                  ))}\n                </div>\n              ) : donations?.length === 0 ? (\n                <div className=\"text-center py-8\">\n                  <DollarSign className=\"mx-auto h-12 w-12 text-gray-400 mb-4\" />\n                  <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No donations yet</h3>\n                  <p className=\"text-gray-500\">When someone pays the $1 fee to access your inbox, donations will appear here.</p>\n                </div>\n              ) : (\n                <div className=\"space-y-4\">\n                  {donations?.map((donation: any) => (\n                    <DonationItem key={donation.id} donation={donation} />\n                  ))}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </Sidebar>\n  );\n}\n","size_bytes":6011},"client/src/pages/email-queue.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Sidebar } from \"@/components/ui/sidebar\";\nimport { EmailItem } from \"@/components/ui/email-item\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useAuth } from \"@/hooks/use-auth\";\n\nexport default function EmailQueue() {\n  const { user } = useAuth();\n  \n  const { data: pendingEmails, isLoading } = useQuery({\n    queryKey: [\"/api/pending-emails\", user?.id],\n    queryFn: async () => {\n      const res = await apiRequest(\"GET\", `/api/pending-emails?userId=${user?.id}`);\n      return res.json();\n    },\n    enabled: !!user?.id\n  });\n\n  const pendingCount = pendingEmails?.filter((e: any) => e.status === 'pending')?.length || 0;\n  const donationSentCount = pendingEmails?.filter((e: any) => e.status === 'donation_sent')?.length || 0;\n  const paidCount = pendingEmails?.filter((e: any) => e.status === 'paid')?.length || 0;\n\n  return (\n    <Sidebar>\n      <div className=\"min-h-screen bg-gray-50\">\n        {/* Header */}\n        <div className=\"bg-white border-b px-4 py-6 sm:px-6 lg:px-8\">\n          <div>\n            <h1 className=\"text-2xl font-bold text-gray-900\">Email Queue</h1>\n            <p className=\"text-sm text-gray-600 mt-1\">\n              Manage pending emails and donation requests ‚Ä¢ Connected: {user?.email}\n            </p>\n          </div>\n        </div>\n        \n        <div className=\"p-4 sm:p-6 lg:p-8\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-lg sm:text-xl\">Email Queue Management</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <Tabs defaultValue=\"all\" className=\"w-full\">\n                <TabsList className=\"grid w-full grid-cols-2 sm:grid-cols-4 text-xs sm:text-sm\">\n                  <TabsTrigger value=\"all\">\n                    All ({pendingEmails?.length || 0})\n                  </TabsTrigger>\n                  <TabsTrigger value=\"pending\">\n                    Pending \n                    <Badge variant=\"secondary\" className=\"ml-2 bg-red-100 text-red-700\">\n                      {pendingCount}\n                    </Badge>\n                  </TabsTrigger>\n                  <TabsTrigger value=\"donation_sent\">\n                    Donation Sent\n                    <Badge variant=\"secondary\" className=\"ml-2 bg-orange-100 text-orange-700\">\n                      {donationSentCount}\n                    </Badge>\n                  </TabsTrigger>\n                  <TabsTrigger value=\"paid\">\n                    Paid\n                    <Badge variant=\"secondary\" className=\"ml-2 bg-green-100 text-green-700\">\n                      {paidCount}\n                    </Badge>\n                  </TabsTrigger>\n                </TabsList>\n                \n                <TabsContent value=\"all\" className=\"mt-6\">\n                  {isLoading ? (\n                    <div className=\"space-y-4\">\n                      {[1, 2, 3, 4, 5].map(i => (\n                        <div key={i} className=\"animate-pulse p-4 bg-gray-50 rounded-lg\">\n                          <div className=\"h-4 bg-gray-200 rounded w-3/4 mb-2\"></div>\n                          <div className=\"h-3 bg-gray-200 rounded w-1/2\"></div>\n                        </div>\n                      ))}\n                    </div>\n                  ) : (\n                    <div className=\"space-y-4\">\n                      {pendingEmails?.map((email: any) => (\n                        <EmailItem key={email.id} email={email} />\n                      ))}\n                    </div>\n                  )}\n                </TabsContent>\n                \n                <TabsContent value=\"pending\" className=\"mt-6\">\n                  <div className=\"space-y-4\">\n                    {pendingEmails?.filter((e: any) => e.status === 'pending').map((email: any) => (\n                      <EmailItem key={email.id} email={email} />\n                    ))}\n                  </div>\n                </TabsContent>\n                \n                <TabsContent value=\"donation_sent\" className=\"mt-6\">\n                  <div className=\"space-y-4\">\n                    {pendingEmails?.filter((e: any) => e.status === 'donation_sent').map((email: any) => (\n                      <EmailItem key={email.id} email={email} />\n                    ))}\n                  </div>\n                </TabsContent>\n                \n                <TabsContent value=\"paid\" className=\"mt-6\">\n                  <div className=\"space-y-4\">\n                    {pendingEmails?.filter((e: any) => e.status === 'paid').map((email: any) => (\n                      <EmailItem key={email.id} email={email} />\n                    ))}\n                  </div>\n                </TabsContent>\n              </Tabs>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </Sidebar>\n  );\n}\n","size_bytes":5007},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/settings.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Sidebar } from \"@/components/ui/sidebar\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useLocation } from \"wouter\";\nimport { Save, Mail, Shield, DollarSign, Bell, AlertTriangle, UserX, Clock, Trash2, CreditCard } from \"lucide-react\";\n\nfunction CleanupButton({ userId }: { userId?: string }) {\n  const { toast } = useToast();\n  \n  const cleanupMutation = useMutation({\n    mutationFn: () => fetch('/api/cleanup-duplicate-emails', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ userId })\n    }).then(res => res.json()),\n    onSuccess: (data: any) => {\n      toast({\n        title: \"Cleanup Complete\",\n        description: `${data.cleaned} duplicate emails removed`,\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Cleanup Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  return (\n    <Button\n      onClick={() => cleanupMutation.mutate()}\n      variant=\"outline\"\n      size=\"sm\"\n      disabled={cleanupMutation.isPending}\n      data-testid=\"button-cleanup-duplicates\"\n    >\n      <Trash2 size={16} className=\"mr-1\" />\n      {cleanupMutation.isPending ? 'Cleaning...' : 'Clean Up'}\n    </Button>\n  );\n}\n\nexport default function Settings() {\n  const { user, logout } = useAuth();\n  const [, setLocation] = useLocation();\n  const [gmailConnected, setGmailConnected] = useState(true);\n  const [autoProcessing, setAutoProcessing] = useState(true);\n  const [donationAmount, setDonationAmount] = useState(\"1.00\");\n  const [emailCheckInterval, setEmailCheckInterval] = useState(\"1.0\");\n  const [charityName, setCharityName] = useState(\"\");\n  const [useAiResponses, setUseAiResponses] = useState(false);\n  const [autoReplyTemplate, setAutoReplyTemplate] = useState(`Hello,\n\nThank you for your email. To help manage my inbox and reduce spam, I use an email filtering system that requires a small $1 donation for unknown senders to ensure your message reaches me.\n\nThis one-time payment grants you permanent access to my inbox for future emails.\n\nPlease complete your donation here: {DONATION_LINK}\n\nOnce your donation is confirmed, your original email will be delivered to my inbox and you'll be added to my known contacts list.\n\nThank you for understanding!\n\nBest regards,\nEmail Guardian System`);\n\n  const { toast } = useToast();\n\n  // Load user's current settings\n  useEffect(() => {\n    if ((user as any)?.emailCheckInterval) {\n      setEmailCheckInterval((user as any).emailCheckInterval);\n    }\n    if ((user as any)?.charityName) {\n      setCharityName((user as any).charityName);\n    }\n    if ((user as any)?.useAiResponses !== undefined) {\n      setUseAiResponses((user as any).useAiResponses);\n    }\n  }, [user]);\n\n  const updateIntervalMutation = useMutation({\n    mutationFn: async (intervalMinutes: number) => {\n      const res = await apiRequest(\"PATCH\", `/api/user/${user?.id}/email-check-interval`, { \n        intervalMinutes \n      });\n      if (!res.ok) {\n        const errorData = await res.json();\n        throw new Error(errorData.message || 'Failed to update email check interval');\n      }\n      return res.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Email Check Interval Updated\",\n        description: \"Your email check frequency has been updated successfully.\",\n      });\n      // Refresh user data\n      queryClient.invalidateQueries({ queryKey: [`/api/user/${user?.id}`] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update email check interval\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  const handleSave = () => {\n    toast({\n      title: \"Settings Saved\",\n      description: \"Your configuration has been updated successfully.\",\n    });\n  };\n\n  const handleIntervalChange = (value: string) => {\n    setEmailCheckInterval(value);\n    const intervalMinutes = parseFloat(value);\n    updateIntervalMutation.mutate(intervalMinutes);\n  };\n\n  const updateCharityNameMutation = useMutation({\n    mutationFn: async (newCharityName: string) => {\n      const res = await apiRequest(\"PATCH\", `/api/user/${user?.id}/charity-name`, { \n        charityName: newCharityName \n      });\n      if (!res.ok) {\n        const errorData = await res.json();\n        throw new Error(errorData.message || 'Failed to update charity name');\n      }\n      return res.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Charity Name Updated\",\n        description: \"Your charity name has been updated successfully.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [`/api/user/${user?.id}`] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update charity name\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  const updateAiResponseMutation = useMutation({\n    mutationFn: async (useAi: boolean) => {\n      const res = await apiRequest(\"PATCH\", `/api/user/${user?.id}/ai-responses`, { \n        useAiResponses: useAi \n      });\n      if (!res.ok) {\n        const errorData = await res.json();\n        throw new Error(errorData.message || 'Failed to update AI response setting');\n      }\n      return res.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"AI Response Setting Updated\",\n        description: \"Your AI response preference has been updated successfully.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [`/api/user/${user?.id}`] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update AI response setting\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  const handleCharityNameSave = () => {\n    if (charityName.trim()) {\n      updateCharityNameMutation.mutate(charityName.trim());\n    }\n  };\n\n  const revokeGmailMutation = useMutation({\n    mutationFn: async () => {\n      const res = await apiRequest(\"POST\", \"/api/auth/gmail/revoke\", { userId: user?.id });\n      \n      if (!res.ok) {\n        const errorText = await res.text();\n        console.error('Gmail revoke error response:', errorText);\n        throw new Error(`Server error: ${res.status} ${res.statusText}`);\n      }\n      \n      const result = await res.json();\n      console.log('Gmail access revoked successfully:', result);\n      return result;\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Gmail Access Revoked\",\n        description: \"Your Gmail account has been disconnected and access revoked.\",\n      });\n      logout();\n      setLocation(\"/setup\");\n    },\n    onError: (error: any) => {\n      console.error('Gmail revoke mutation error:', error);\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to revoke Gmail access\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  const deleteAccountMutation = useMutation({\n    mutationFn: async () => {\n      const res = await apiRequest(\"DELETE\", `/api/user/${user?.id}`);\n      \n      if (!res.ok) {\n        const errorText = await res.text();\n        console.error('Delete account error response:', errorText);\n        throw new Error(`Server error: ${res.status} ${res.statusText}`);\n      }\n      \n      const result = await res.json();\n      console.log('Account deleted successfully:', result);\n      return result;\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Account Deleted\",\n        description: \"Your account and all data have been permanently deleted.\",\n      });\n      // Clear the query cache to remove deleted user from login list\n      queryClient.invalidateQueries({ queryKey: ['/api/users'] });\n      logout();\n      setLocation(\"/setup\");\n    },\n    onError: (error: any) => {\n      console.error('Delete account mutation error:', error);\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to delete account\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  const handleConnectGmail = () => {\n    // This would trigger the Gmail OAuth flow\n    window.location.href = \"/api/auth/gmail\";\n  };\n\n  return (\n    <Sidebar>\n      <div className=\"min-h-screen bg-gray-50\">\n        {/* Header */}\n        <div className=\"bg-white border-b px-4 py-6 sm:px-6 lg:px-8\">\n          <div>\n            <h1 className=\"text-2xl font-bold text-gray-900\">Settings</h1>\n            <p className=\"text-sm text-gray-600 mt-1\">\n              Configure your email filtering and donation system ‚Ä¢ Connected: {user?.email}\n            </p>\n          </div>\n        </div>\n        \n        <div className=\"p-4 sm:p-6 lg:p-8 space-y-6 sm:space-y-8\">\n          {/* Gmail Integration */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <Mail className=\"text-blue-600\" size={20} />\n                <span>Gmail Integration</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <Label className=\"text-base font-medium\">Gmail Connection Status</Label>\n                  <p className=\"text-sm text-gray-500\">Connect your Gmail account to enable email filtering</p>\n                </div>\n                <div className=\"flex items-center space-x-3\">\n                  <Badge variant={gmailConnected ? \"default\" : \"destructive\"} className={gmailConnected ? \"bg-green-100 text-green-700\" : \"\"}>\n                    {gmailConnected ? \"Connected\" : \"Disconnected\"}\n                  </Badge>\n                  <Button onClick={handleConnectGmail} variant={gmailConnected ? \"outline\" : \"default\"}>\n                    {gmailConnected ? \"Reconnect\" : \"Connect Gmail\"}\n                  </Button>\n                </div>\n              </div>\n              \n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <Label className=\"text-base font-medium\">Auto-Process Emails (Always On)</Label>\n                  <p className=\"text-sm text-gray-500\">System automatically processes emails based on your configured interval</p>\n                </div>\n                <Switch checked={true} disabled={true} />\n              </div>\n\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <Label className=\"text-base font-medium flex items-center space-x-2\">\n                    <Clock size={16} />\n                    <span>Email Check Interval</span>\n                  </Label>\n                  <p className=\"text-sm text-gray-500\">How often to check for new emails (lower values increase API usage)</p>\n                </div>\n                <div className=\"w-48\">\n                  <Select value={emailCheckInterval} onValueChange={handleIntervalChange} disabled={updateIntervalMutation.isPending}>\n                    <SelectTrigger data-testid=\"select-email-interval\">\n                      <SelectValue placeholder=\"Select interval\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"0.5\">30 seconds</SelectItem>\n                      <SelectItem value=\"1.0\">1 minute</SelectItem>\n                      <SelectItem value=\"2.0\">2 minutes</SelectItem>\n                      <SelectItem value=\"5.0\">5 minutes</SelectItem>\n                      <SelectItem value=\"10.0\">10 minutes</SelectItem>\n                      <SelectItem value=\"15.0\">15 minutes</SelectItem>\n                      <SelectItem value=\"30.0\">30 minutes</SelectItem>\n                      <SelectItem value=\"60.0\">1 hour</SelectItem>\n                    </SelectContent>\n                  </Select>\n                  {updateIntervalMutation.isPending && (\n                    <p className=\"text-sm text-gray-500 mt-1\">Updating...</p>\n                  )}\n                </div>\n              </div>\n\n              <Alert>\n                <AlertTriangle className=\"h-4 w-4\" />\n                <AlertDescription>\n                  <strong>API Usage Notice:</strong> Shorter check intervals (30 seconds - 2 minutes) will increase Gmail API usage. \n                  Google provides a free quota of 1 billion API calls per day, so this shouldn't be a concern for normal usage. \n                  The system efficiently checks only emails newer than the last check time.\n                </AlertDescription>\n              </Alert>\n            </CardContent>\n          </Card>\n\n          {/* Donation Settings */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <DollarSign className=\"text-green-600\" size={20} />\n                <span>Donation Configuration</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"donationAmount\" className=\"text-base font-medium\">Donation Amount (USD)</Label>\n                <p className=\"text-sm text-gray-500 mb-2\">Amount required for unknown senders to access your inbox</p>\n                <Input\n                  id=\"donationAmount\"\n                  type=\"number\"\n                  min=\"0.50\"\n                  max=\"100.00\"\n                  step=\"0.01\"\n                  value={donationAmount}\n                  onChange={(e) => setDonationAmount(e.target.value)}\n                  className=\"w-32\"\n                />\n              </div>\n\n              <div>\n                <Label htmlFor=\"charity-name\" className=\"text-base font-medium\">Charity Name</Label>\n                <p className=\"text-sm text-gray-500 mb-2\">The name shown to senders in payment requests (e.g., \"Donation to [Your Charity]\")</p>\n                <div className=\"flex items-center space-x-2 max-w-md\">\n                  <Input\n                    id=\"charity-name\"\n                    type=\"text\"\n                    value={charityName}\n                    onChange={(e) => setCharityName(e.target.value)}\n                    placeholder=\"Email Guardian\"\n                    data-testid=\"input-charity-name\"\n                  />\n                  <Button \n                    onClick={handleCharityNameSave} \n                    variant=\"outline\" \n                    size=\"sm\"\n                    disabled={updateCharityNameMutation.isPending || !charityName.trim()}\n                    data-testid=\"button-save-charity-name\"\n                  >\n                    <Save size={16} className=\"mr-1\" />\n                    {updateCharityNameMutation.isPending ? 'Saving...' : 'Save'}\n                  </Button>\n                </div>\n                <p className=\"text-sm text-gray-400 mt-1\">This appears in Stripe payment descriptions</p>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* AI Response Settings */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <Bell className=\"text-blue-600\" size={20} />\n                <span>Email Response Configuration</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <Label className=\"text-base font-medium\">Use AI-Generated Responses</Label>\n                  <p className=\"text-sm text-gray-500\">\n                    Generate contextual donation requests that reference the sender's original message. \n                    If disabled, uses the template below.\n                  </p>\n                </div>\n                <Switch \n                  checked={useAiResponses}\n                  onCheckedChange={(checked) => {\n                    setUseAiResponses(checked);\n                    updateAiResponseMutation.mutate(checked);\n                  }}\n                  disabled={updateAiResponseMutation.isPending}\n                  data-testid=\"switch-ai-responses\"\n                />\n              </div>\n\n              {useAiResponses && (\n                <Alert>\n                  <AlertTriangle className=\"h-4 w-4\" />\n                  <AlertDescription>\n                    AI responses analyze each email's content to create personalized donation requests while maintaining the core filtering purpose. \n                    Requires OpenAI API key configuration.\n                  </AlertDescription>\n                </Alert>\n              )}\n            </CardContent>\n          </Card>\n\n          {/* Auto-Reply Template */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <Bell className=\"text-purple-600\" size={20} />\n                <span>Template Response {useAiResponses ? \"(Fallback)\" : \"(Active)\"}</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"autoReplyTemplate\" className=\"text-base font-medium\">Email Template</Label>\n                <p className=\"text-sm text-gray-500 mb-2\">\n                  {useAiResponses \n                    ? \"Used as fallback when AI generation fails. Use {DONATION_LINK} as placeholder for the payment link.\"\n                    : \"Message sent to unknown senders. Use {DONATION_LINK} as placeholder for the payment link.\"\n                  }\n                </p>\n                <Textarea\n                  id=\"autoReplyTemplate\"\n                  value={autoReplyTemplate}\n                  onChange={(e) => setAutoReplyTemplate(e.target.value)}\n                  rows={12}\n                  className=\"font-mono text-sm\"\n                  disabled={useAiResponses}\n                />\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Security Settings */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <Shield className=\"text-red-600\" size={20} />\n                <span>Security & Privacy</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <Label className=\"text-base font-medium\">Automatically Whitelist Donors</Label>\n                  <p className=\"text-sm text-gray-500\">Add donors to known contacts after successful payment</p>\n                </div>\n                <Switch checked={true} />\n              </div>\n              \n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <Label className=\"text-base font-medium\">Email Notifications</Label>\n                  <p className=\"text-sm text-gray-500\">Receive notifications for new donations and filtered emails</p>\n                </div>\n                <Switch checked={true} />\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Maintenance Tools */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <Trash2 className=\"text-orange-600\" size={20} />\n                <span>Maintenance Tools</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <Label className=\"text-base font-medium\">Clean Up Auto-Reply Duplicates</Label>\n                  <p className=\"text-sm text-gray-500\">Remove duplicate auto-reply emails if any got created by accident</p>\n                </div>\n                <CleanupButton userId={user?.id} />\n              </div>\n              \n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <Label className=\"text-base font-medium\">Test Payment System</Label>\n                  <p className=\"text-sm text-gray-500\">Test the Stripe payment integration with a $1 donation</p>\n                </div>\n                <Button\n                  onClick={() => setLocation('/checkout')}\n                  variant=\"outline\"\n                  size=\"sm\"\n                  data-testid=\"button-test-payment\"\n                >\n                  <CreditCard size={16} className=\"mr-1\" />\n                  Test Payment\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Danger Zone */}\n          <Card className=\"border-red-200\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2 text-red-600\">\n                <AlertTriangle className=\"text-red-600\" size={20} />\n                <span>Danger Zone</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              <Alert className=\"border-orange-200 bg-orange-50\">\n                <AlertTriangle className=\"h-4 w-4 text-orange-600\" />\n                <AlertDescription className=\"text-orange-800\">\n                  These actions will permanently affect your account and cannot be undone.\n                </AlertDescription>\n              </Alert>\n\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center justify-between p-4 border border-orange-200 rounded-lg bg-orange-50\">\n                  <div>\n                    <h3 className=\"font-medium text-gray-900\">Revoke Gmail Access</h3>\n                    <p className=\"text-sm text-gray-600\">\n                      Disconnect your Gmail account and revoke all API permissions. This will stop email filtering immediately.\n                    </p>\n                  </div>\n                  <Button \n                    variant=\"outline\"\n                    onClick={() => revokeGmailMutation.mutate()}\n                    disabled={revokeGmailMutation.isPending}\n                    className=\"border-orange-300 text-orange-700 hover:bg-orange-100\"\n                  >\n                    {revokeGmailMutation.isPending ? \"Revoking...\" : \"Revoke Access\"}\n                  </Button>\n                </div>\n\n                <div className=\"flex items-center justify-between p-4 border border-red-200 rounded-lg bg-red-50\">\n                  <div>\n                    <h3 className=\"font-medium text-gray-900\">Delete Account</h3>\n                    <p className=\"text-sm text-gray-600\">\n                      Permanently delete your account, contacts, and all data. Gmail access will also be revoked.\n                    </p>\n                  </div>\n                  <Button \n                    variant=\"destructive\"\n                    onClick={() => deleteAccountMutation.mutate()}\n                    disabled={deleteAccountMutation.isPending}\n                    className=\"bg-red-600 hover:bg-red-700\"\n                  >\n                    <UserX className=\"mr-2\" size={16} />\n                    {deleteAccountMutation.isPending ? \"Deleting...\" : \"Delete Account\"}\n                  </Button>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Save Button */}\n          <div className=\"flex justify-end\">\n            <Button onClick={handleSave} className=\"flex items-center space-x-2\">\n              <Save size={16} />\n              <span>Save Settings</span>\n            </Button>\n          </div>\n        </div>\n      </div>\n    </Sidebar>\n  );\n}\n","size_bytes":24296},"client/src/pages/setup.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useLocation } from \"wouter\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { Shield, Mail, CheckCircle, AlertCircle, ArrowRight, RefreshCw } from \"lucide-react\";\n\n// Existing user login functionality moved to separate sign-in page\n\nexport default function Setup() {\n  const [, setLocation] = useLocation();\n  const [userEmail, setUserEmail] = useState(\"\");\n  const [authInProgress, setAuthInProgress] = useState(false);\n  const { toast } = useToast();\n  const { login, isAuthenticated } = useAuth();\n\n  // Redirect if already authenticated\n  useEffect(() => {\n    if (isAuthenticated) {\n      setLocation(\"/\");\n    }\n  }, [isAuthenticated, setLocation]);\n\n  // Check for OAuth callback code in URL\n  useEffect(() => {\n    const urlParams = new URLSearchParams(window.location.search);\n    const code = urlParams.get('code');\n    const email = localStorage.getItem('pending_auth_email');\n    \n    if (code && email) {\n      handleGmailCallback.mutate({ code, email });\n      // Clean up URL\n      window.history.replaceState({}, document.title, window.location.pathname);\n      localStorage.removeItem('pending_auth_email');\n    }\n  }, []);\n\n  const handleGmailCallback = useMutation({\n    mutationFn: async ({ code, email }: { code: string; email: string }) => {\n      const res = await apiRequest(\"POST\", \"/api/auth/gmail/callback\", { code, email });\n      if (!res.ok) {\n        const errorData = await res.json();\n        throw new Error(errorData.message || 'Authentication failed');\n      }\n      return res.json();\n    },\n    onSuccess: (data) => {\n      login(data.user);\n      toast({\n        title: \"Gmail Connected!\",\n        description: \"Your email filtering system is now active.\",\n      });\n      setLocation(\"/\");\n    },\n    onError: (error: any) => {\n      console.error('Gmail callback error:', error);\n      toast({\n        title: \"Authentication Failed\",\n        description: error.message || \"Failed to connect Gmail account\",\n        variant: \"destructive\",\n      });\n      setAuthInProgress(false);\n    }\n  });\n\n  const getGmailAuthUrl = useMutation({\n    mutationFn: async () => {\n      const res = await apiRequest(\"GET\", \"/api/auth/gmail\");\n      return res.json();\n    },\n    onSuccess: (data) => {\n      localStorage.setItem('pending_auth_email', userEmail);\n      window.location.href = data.authUrl;\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to initialize Gmail authentication\",\n        variant: \"destructive\",\n      });\n      setAuthInProgress(false);\n    }\n  });\n\n  const handleGmailAuth = () => {\n    if (!userEmail.trim()) {\n      toast({\n        title: \"Email Required\",\n        description: \"Please enter your Gmail address\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setAuthInProgress(true);\n    getGmailAuthUrl.mutate();\n  };\n\n  const isValidEmail = (email: string) => {\n    return /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(email);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 flex items-center justify-center p-4\">\n      <div className=\"w-full max-w-2xl\">\n        {/* Header */}\n        <div className=\"text-center mb-8\">\n          <div className=\"w-16 h-16 bg-primary rounded-2xl flex items-center justify-center mx-auto mb-4\">\n            <Shield className=\"text-white\" size={32} />\n          </div>\n          <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">Welcome to Email Guardian</h1>\n          <p className=\"text-gray-600 text-lg\">\n            Set up your donation-based email filtering system in just a few steps\n          </p>\n        </div>\n\n        {/* Setup Steps */}\n        <Card className=\"mb-8\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center space-x-2\">\n              <Mail className=\"text-blue-600\" size={24} />\n              <span>Connect Your Gmail Account</span>\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-6\">\n            <Alert>\n              <AlertCircle className=\"h-4 w-4\" />\n              <AlertDescription>\n                Email Guardian needs access to your Gmail account to filter incoming emails. \n                We only read emails and manage labels - we never delete or modify your email content.\n              </AlertDescription>\n            </Alert>\n\n            <div className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"email\" className=\"text-base font-medium\">Your Gmail Address</Label>\n                <Input\n                  id=\"email\"\n                  type=\"email\"\n                  value={userEmail}\n                  onChange={(e) => setUserEmail(e.target.value)}\n                  placeholder=\"your.email@gmail.com\"\n                  className=\"mt-2\"\n                  disabled={authInProgress}\n                />\n              </div>\n\n              <Button \n                onClick={handleGmailAuth}\n                disabled={!isValidEmail(userEmail) || authInProgress || handleGmailCallback.isPending}\n                className=\"w-full bg-primary hover:bg-blue-700 text-white py-3\"\n                size=\"lg\"\n              >\n                {authInProgress || handleGmailCallback.isPending ? (\n                  <>\n                    <div className=\"animate-spin w-4 h-4 border-2 border-white border-t-transparent rounded-full mr-2\" />\n                    {handleGmailCallback.isPending ? \"Completing Setup...\" : \"Connecting to Gmail...\"}\n                  </>\n                ) : (\n                  <>\n                    <Mail className=\"mr-2\" size={16} />\n                    Connect Gmail Account\n                    <ArrowRight className=\"ml-2\" size={16} />\n                  </>\n                )}\n              </Button>\n\n              <div className=\"text-center mt-4 space-y-2\">\n                <Button \n                  variant=\"outline\"\n                  onClick={() => setLocation(\"/demo\")}\n                  className=\"text-sm w-full\"\n                >\n                  Try Demo Mode Instead\n                </Button>\n                \n                <div className=\"text-center\">\n                  <p className=\"text-sm text-gray-600\">\n                    Already have an account?{\" \"}\n                    <Button\n                      variant=\"link\"\n                      className=\"p-0 h-auto text-blue-600 hover:text-blue-800\"\n                      onClick={() => setLocation(\"/signin\")}\n                      data-testid=\"link-signin\"\n                    >\n                      Sign in here\n                    </Button>\n                  </p>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Features Preview */}\n        <Card>\n          <CardHeader>\n            <CardTitle>What happens next?</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n              <div className=\"text-center p-4\">\n                <div className=\"w-12 h-12 bg-blue-50 rounded-lg flex items-center justify-center mx-auto mb-3\">\n                  <Shield className=\"text-blue-600\" size={24} />\n                </div>\n                <h3 className=\"font-medium text-gray-900 mb-2\">Email Filtering</h3>\n                <p className=\"text-sm text-gray-500\">\n                  Unknown senders will be filtered and prompted to donate $1\n                </p>\n              </div>\n              \n              <div className=\"text-center p-4\">\n                <div className=\"w-12 h-12 bg-green-50 rounded-lg flex items-center justify-center mx-auto mb-3\">\n                  <CheckCircle className=\"text-green-600\" size={24} />\n                </div>\n                <h3 className=\"font-medium text-gray-900 mb-2\">Automatic Processing</h3>\n                <p className=\"text-sm text-gray-500\">\n                  Paid emails are automatically moved to your inbox\n                </p>\n              </div>\n              \n              <div className=\"text-center p-4\">\n                <div className=\"w-12 h-12 bg-purple-50 rounded-lg flex items-center justify-center mx-auto mb-3\">\n                  <Mail className=\"text-purple-600\" size={24} />\n                </div>\n                <h3 className=\"font-medium text-gray-900 mb-2\">Contact Management</h3>\n                <p className=\"text-sm text-gray-500\">\n                  Known contacts bypass the filter completely\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Footer */}\n        <div className=\"text-center mt-8 text-sm text-gray-500\">\n          <p>Your data is secure and encrypted. We follow Gmail's security best practices.</p>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":9340},"client/src/components/layout/header.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { RefreshCw, LogOut } from \"lucide-react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useLocation } from \"wouter\";\n\ninterface HeaderProps {\n  title: string;\n  subtitle: string;\n  gmailStatus: \"connected\" | \"disconnected\";\n}\n\nconst CURRENT_USER_ID = \"user-123\";\n\nexport function Header({ title, subtitle, gmailStatus }: HeaderProps) {\n  const { toast } = useToast();\n  const { user, logout } = useAuth();\n  const [, setLocation] = useLocation();\n\n  const syncMutation = useMutation({\n    mutationFn: async () => {\n      await apiRequest(\"POST\", \"/api/process-emails\", { userId: user?.id });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/stats\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/pending-emails\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/donations\"] });\n      toast({\n        title: \"Sync Complete\",\n        description: \"Successfully processed new emails and updated stats.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Sync Failed\",\n        description: error.message || \"Failed to sync emails\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  return (\n    <header className=\"bg-white border-b border-gray-200 px-8 py-4\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h2 className=\"text-2xl font-bold text-gray-900\">{title}</h2>\n          <p className=\"text-gray-600 mt-1\">{subtitle}</p>\n        </div>\n        <div className=\"flex items-center space-x-4\">\n          <Badge \n            variant={gmailStatus === \"connected\" ? \"default\" : \"destructive\"}\n            className={gmailStatus === \"connected\" ? \"bg-green-100 text-green-700 border-green-200\" : \"\"}\n          >\n            <div className={`w-2 h-2 rounded-full mr-2 ${gmailStatus === \"connected\" ? \"bg-green-500\" : \"bg-red-500\"}`}></div>\n            Gmail {gmailStatus === \"connected\" ? \"Connected\" : \"Disconnected\"}\n          </Badge>\n          <Button \n            onClick={() => syncMutation.mutate()}\n            disabled={syncMutation.isPending}\n            className=\"bg-primary hover:bg-blue-700\"\n          >\n            <RefreshCw className={`mr-2 ${syncMutation.isPending ? \"animate-spin\" : \"\"}`} size={16} />\n            {syncMutation.isPending ? \"Syncing...\" : \"Sync Now\"}\n          </Button>\n          <Button \n            variant=\"outline\"\n            onClick={() => {\n              logout();\n              setLocation(\"/setup\");\n            }}\n            className=\"text-gray-600 hover:text-gray-800\"\n          >\n            <LogOut className=\"mr-2\" size={16} />\n            Logout\n          </Button>\n        </div>\n      </div>\n    </header>\n  );\n}\n","size_bytes":2971},"client/src/components/layout/sidebar.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { cn } from \"@/lib/utils\";\nimport { \n  Shield, \n  LayoutDashboard, \n  Inbox, \n  Users, \n  DollarSign, \n  Settings \n} from \"lucide-react\";\n\nconst navigation = [\n  { name: \"Dashboard\", href: \"/\", icon: LayoutDashboard },\n  { name: \"Email Queue\", href: \"/email-queue\", icon: Inbox },\n  { name: \"Known Contacts\", href: \"/contacts\", icon: Users },\n  { name: \"Donations\", href: \"/donations\", icon: DollarSign },\n  { name: \"Settings\", href: \"/settings\", icon: Settings },\n];\n\nexport function Sidebar() {\n  const [location] = useLocation();\n\n  return (\n    <aside className=\"w-64 bg-white shadow-sm border-r border-gray-200 fixed h-full\">\n      <div className=\"p-6 border-b border-gray-200\">\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"w-10 h-10 bg-primary rounded-lg flex items-center justify-center\">\n            <Shield className=\"text-white\" size={20} />\n          </div>\n          <div>\n            <h1 className=\"font-bold text-lg text-gray-900\">Email Guardian</h1>\n            <p className=\"text-sm text-gray-500\">Gmail Filter System</p>\n          </div>\n        </div>\n      </div>\n      \n      <nav className=\"p-4\">\n        <ul className=\"space-y-2\">\n          {navigation.map((item) => {\n            const isActive = location === item.href;\n            return (\n              <li key={item.name}>\n                <Link href={item.href}>\n                  <span className={cn(\n                    \"flex items-center space-x-3 px-4 py-3 rounded-lg transition-colors cursor-pointer\",\n                    isActive \n                      ? \"text-gray-700 bg-blue-50 border-l-4 border-primary font-medium\" \n                      : \"text-gray-600 hover:bg-gray-50\"\n                  )}>\n                    <item.icon size={20} />\n                    <span>{item.name}</span>\n                  </span>\n                </Link>\n              </li>\n            );\n          })}\n        </ul>\n      </nav>\n    </aside>\n  );\n}\n","size_bytes":2004},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }","size_bytes":1583},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/donation-item.tsx":{"content":"import { CheckCircle } from \"lucide-react\";\n\ninterface DonationItemProps {\n  donation: {\n    id: string;\n    senderEmail: string;\n    amount: string;\n    paidAt: string;\n    status: string;\n  };\n}\n\nexport function DonationItem({ donation }: DonationItemProps) {\n  const formatTimestamp = (timestamp: string) => {\n    const date = new Date(timestamp);\n    const now = new Date();\n    const diffHours = Math.floor((now.getTime() - date.getTime()) / (1000 * 60 * 60));\n    \n    if (diffHours < 1) {\n      return \"Just now\";\n    } else if (diffHours < 24) {\n      return `${diffHours} hours ago`;\n    } else {\n      const diffDays = Math.floor(diffHours / 24);\n      return `${diffDays} days ago`;\n    }\n  };\n\n  return (\n    <div className=\"flex items-center justify-between\">\n      <div className=\"flex items-center space-x-3\">\n        <div className=\"w-8 h-8 bg-green-100 rounded-full flex items-center justify-center\">\n          <CheckCircle className=\"text-green-600\" size={16} />\n        </div>\n        <div>\n          <p className=\"font-medium text-gray-900\">{donation.senderEmail}</p>\n          <p className=\"text-sm text-gray-500\">{formatTimestamp(donation.paidAt)}</p>\n        </div>\n      </div>\n      <div className=\"text-right\">\n        <p className=\"font-semibold text-green-600\">${parseFloat(donation.amount).toFixed(2)}</p>\n        <p className=\"text-xs text-gray-500\">Stripe</p>\n      </div>\n    </div>\n  );\n}\n","size_bytes":1422},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/email-item.tsx":{"content":"import { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { User, Eye } from \"lucide-react\";\n\ninterface EmailItemProps {\n  email: {\n    id: string;\n    sender: string;\n    subject: string;\n    snippet: string;\n    receivedAt: string;\n    status: string;\n  };\n}\n\nexport function EmailItem({ email }: EmailItemProps) {\n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case \"pending\":\n        return <Badge variant=\"destructive\" className=\"bg-red-100 text-red-700 text-xs\">Pending</Badge>;\n      case \"donation_sent\":\n        return <Badge className=\"bg-orange-100 text-orange-700 text-xs\">Donation Sent</Badge>;\n      case \"paid\":\n        return <Badge className=\"bg-green-100 text-green-700 text-xs\">Paid</Badge>;\n      case \"released\":\n        return <Badge className=\"bg-blue-100 text-blue-700 text-xs\">Released</Badge>;\n      default:\n        return <Badge variant=\"secondary\">{status}</Badge>;\n    }\n  };\n\n  const formatTimestamp = (timestamp: string) => {\n    const date = new Date(timestamp);\n    const now = new Date();\n    const diffHours = Math.floor((now.getTime() - date.getTime()) / (1000 * 60 * 60));\n    \n    if (diffHours < 1) {\n      return \"Just now\";\n    } else if (diffHours < 24) {\n      return `${diffHours} hours ago`;\n    } else {\n      const diffDays = Math.floor(diffHours / 24);\n      return `${diffDays} days ago`;\n    }\n  };\n\n  return (\n    <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between p-4 bg-gray-50 rounded-lg border hover:bg-gray-100 transition-colors space-y-3 sm:space-y-0\">\n      <div className=\"flex items-center space-x-3 min-w-0\">\n        <div className=\"w-10 h-10 bg-gray-300 rounded-full flex items-center justify-center flex-shrink-0\">\n          <User className=\"text-gray-600\" size={20} />\n        </div>\n        <div className=\"min-w-0 flex-1\">\n          <p className=\"font-medium text-gray-900 truncate\">{email.sender}</p>\n          <p className=\"text-sm text-gray-500 truncate\">{email.subject}</p>\n          <p className=\"text-xs text-gray-400\">{formatTimestamp(email.receivedAt)}</p>\n        </div>\n      </div>\n      <div className=\"flex items-center justify-between sm:justify-end space-x-2\">\n        {getStatusBadge(email.status)}\n        <Button variant=\"ghost\" size=\"sm\" className=\"text-gray-400 hover:text-gray-600 flex-shrink-0\">\n          <Eye size={16} />\n        </Button>\n      </div>\n    </div>\n  );\n}\n","size_bytes":2461},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import { useState } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Sheet, SheetContent, SheetTrigger } from \"@/components/ui/sheet\";\nimport { \n  Shield, \n  Home, \n  Mail, \n  Users, \n  DollarSign, \n  Settings, \n  Menu,\n  X,\n  LogOut\n} from \"lucide-react\";\nimport { useAuth } from \"@/hooks/use-auth\";\n\ninterface SidebarProps {\n  children: React.ReactNode;\n}\n\nconst navItems = [\n  { path: \"/\", icon: Home, label: \"Dashboard\" },\n  { path: \"/email-queue\", icon: Mail, label: \"Email Queue\" },\n  { path: \"/contacts\", icon: Users, label: \"Contacts\" },\n  { path: \"/donations\", icon: DollarSign, label: \"Donations\" },\n  { path: \"/settings\", icon: Settings, label: \"Settings\" },\n];\n\nfunction SidebarContent({ onItemClick }: { onItemClick?: () => void }) {\n  const [location] = useLocation();\n  const { logout } = useAuth();\n\n  return (\n    <div className=\"flex flex-col h-full bg-gray-900 text-white\">\n      {/* Header */}\n      <div className=\"flex items-center space-x-3 p-4 border-b border-gray-800\">\n        <Shield className=\"h-8 w-8 text-blue-400\" />\n        <div>\n          <h1 className=\"text-lg font-bold\">Email Guardian</h1>\n          <p className=\"text-xs text-gray-400\">Email Filtering System</p>\n        </div>\n      </div>\n\n      {/* Navigation */}\n      <nav className=\"flex-1 p-4 space-y-2\">\n        {navItems.map((item) => {\n          const Icon = item.icon;\n          const isActive = location === item.path || \n            (item.path !== \"/\" && location.startsWith(item.path));\n          \n          return (\n            <Link key={item.path} href={item.path}>\n              <Button\n                variant={isActive ? \"secondary\" : \"ghost\"}\n                className={`w-full justify-start text-left h-12 ${\n                  isActive \n                    ? \"bg-blue-600 text-white hover:bg-blue-700\" \n                    : \"text-gray-300 hover:text-white hover:bg-gray-800\"\n                }`}\n                onClick={onItemClick}\n                data-testid={`nav-${item.label.toLowerCase().replace(' ', '-')}`}\n              >\n                <Icon className=\"h-5 w-5 mr-3\" />\n                {item.label}\n              </Button>\n            </Link>\n          );\n        })}\n      </nav>\n\n      {/* Footer */}\n      <div className=\"p-4 border-t border-gray-800\">\n        <Button\n          variant=\"ghost\"\n          className=\"w-full justify-start text-gray-300 hover:text-white hover:bg-gray-800 h-12\"\n          onClick={() => {\n            logout();\n            onItemClick?.();\n          }}\n          data-testid=\"button-logout\"\n        >\n          <LogOut className=\"h-5 w-5 mr-3\" />\n          Sign Out\n        </Button>\n      </div>\n    </div>\n  );\n}\n\nexport function Sidebar({ children }: SidebarProps) {\n  const [isOpen, setIsOpen] = useState(false);\n\n  return (\n    <div className=\"min-h-screen flex\">\n      {/* Mobile/Tablet Drawer */}\n      <Sheet open={isOpen} onOpenChange={setIsOpen}>\n        <SheetTrigger asChild>\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            className=\"fixed top-4 left-4 z-50 md:hidden bg-white shadow-md hover:bg-gray-50\"\n            data-testid=\"button-menu-toggle\"\n          >\n            <Menu className=\"h-6 w-6\" />\n          </Button>\n        </SheetTrigger>\n        <SheetContent side=\"left\" className=\"p-0 w-72 sm:w-80\">\n          <SidebarContent onItemClick={() => setIsOpen(false)} />\n        </SheetContent>\n      </Sheet>\n\n      {/* Desktop Drawer */}\n      <div className=\"hidden md:block\">\n        <Sheet>\n          <SheetTrigger asChild>\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              className=\"fixed top-4 left-4 z-50 bg-white shadow-md hover:bg-gray-50\"\n              data-testid=\"button-menu-toggle-desktop\"\n            >\n              <Menu className=\"h-6 w-6\" />\n            </Button>\n          </SheetTrigger>\n          <SheetContent side=\"left\" className=\"p-0 w-72 sm:w-80\">\n            <SidebarContent />\n          </SheetContent>\n        </Sheet>\n      </div>\n\n      {/* Main Content */}\n      <div className=\"flex-1 min-h-screen\">\n        {/* Top padding for mobile menu button */}\n        <div className=\"pt-16 md:pt-16\">\n          {children}\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":4308},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/stats-card.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { LucideIcon } from \"lucide-react\";\nimport { TrendingUp, TrendingDown } from \"lucide-react\";\n\ninterface StatsCardProps {\n  title: string;\n  value: string | number;\n  icon: LucideIcon;\n  iconColor: string;\n  iconBg: string;\n  trend?: string;\n  trendText?: string;\n  trendType?: \"positive\" | \"negative\";\n  subtext?: string;\n}\n\nexport function StatsCard({\n  title,\n  value,\n  icon: Icon,\n  iconColor,\n  iconBg,\n  trend,\n  trendText,\n  trendType,\n  subtext\n}: StatsCardProps) {\n  return (\n    <Card>\n      <CardContent className=\"p-6\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <p className=\"text-gray-500 text-sm font-medium\">{title}</p>\n            <p className=\"text-3xl font-bold text-gray-900 mt-2\">{value}</p>\n          </div>\n          <div className={`w-12 h-12 ${iconBg} rounded-lg flex items-center justify-center`}>\n            <Icon className={iconColor} size={24} />\n          </div>\n        </div>\n        {(trend && trendText) && (\n          <div className=\"flex items-center mt-4 text-sm\">\n            {trendType === \"positive\" ? (\n              <TrendingUp className=\"text-green-500 mr-1\" size={16} />\n            ) : (\n              <TrendingDown className=\"text-red-500 mr-1\" size={16} />\n            )}\n            <span className={`font-medium ${trendType === \"positive\" ? \"text-green-500\" : \"text-red-500\"}`}>\n              {trend}\n            </span>\n            <span className=\"text-gray-500 ml-1\">{trendText}</span>\n          </div>\n        )}\n        {subtext && (\n          <p className=\"text-sm text-gray-500 mt-4\">{subtext}</p>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":1716},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/pages/signin.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useLocation } from \"wouter\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { Shield, Mail, ArrowRight, AlertCircle } from \"lucide-react\";\n\nexport default function SignIn() {\n  const { login } = useAuth();\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const [email, setEmail] = useState(\"\");\n\n  const signInMutation = useMutation({\n    mutationFn: async (email: string) => {\n      const res = await apiRequest(\"GET\", \"/api/users\");\n      const users = await res.json();\n      \n      const user = users.find((u: any) => u.email.toLowerCase() === email.toLowerCase());\n      if (!user) {\n        throw new Error(\"No account found with this email address. Please sign up first.\");\n      }\n      \n      // Verify the user still exists and has valid tokens\n      const verifyRes = await apiRequest(\"GET\", `/api/user/${user.id}`);\n      if (!verifyRes.ok) {\n        throw new Error(\"Account not found or has been deleted. Please sign up again.\");\n      }\n      \n      return await verifyRes.json();\n    },\n    onSuccess: (user) => {\n      login({\n        id: user.id,\n        email: user.email,\n        gmailAccessToken: user.gmailToken,\n        gmailRefreshToken: user.gmailRefreshToken\n      });\n      toast({\n        title: \"Welcome back!\",\n        description: `Signed in successfully as ${user.email}`,\n      });\n      setLocation(\"/\");\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Sign In Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  const handleSignIn = () => {\n    if (!email.trim()) {\n      toast({\n        title: \"Email Required\",\n        description: \"Please enter your email address\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    if (!email.includes(\"@\")) {\n      toast({\n        title: \"Invalid Email\",\n        description: \"Please enter a valid email address\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    signInMutation.mutate(email.trim());\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === \"Enter\") {\n      handleSignIn();\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 flex items-center justify-center p-4\">\n      <div className=\"w-full max-w-md space-y-6\">\n        {/* Header */}\n        <div className=\"text-center space-y-2\">\n          <div className=\"flex items-center justify-center space-x-2 mb-4\">\n            <Shield className=\"text-blue-600\" size={32} />\n            <h1 className=\"text-2xl font-bold text-gray-900\">Email Guardian</h1>\n          </div>\n          <h2 className=\"text-xl font-semibold text-gray-700\">Sign In</h2>\n          <p className=\"text-gray-600\">Enter your email to access your account</p>\n        </div>\n\n        {/* Sign In Form */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center space-x-2\">\n              <Mail className=\"text-blue-600\" size={20} />\n              <span>Account Sign In</span>\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"email\">Email Address</Label>\n              <Input\n                id=\"email\"\n                type=\"email\"\n                placeholder=\"your.email@example.com\"\n                value={email}\n                onChange={(e) => setEmail(e.target.value)}\n                onKeyPress={handleKeyPress}\n                disabled={signInMutation.isPending}\n                data-testid=\"input-signin-email\"\n              />\n            </div>\n            \n            <Button \n              onClick={handleSignIn}\n              disabled={signInMutation.isPending || !email.trim()}\n              className=\"w-full\"\n              data-testid=\"button-signin\"\n            >\n              {signInMutation.isPending ? (\n                \"Signing in...\"\n              ) : (\n                <>\n                  Sign In\n                  <ArrowRight className=\"ml-2\" size={16} />\n                </>\n              )}\n            </Button>\n          </CardContent>\n        </Card>\n\n        {/* Info */}\n        <Alert>\n          <AlertCircle className=\"h-4 w-4\" />\n          <AlertDescription>\n            No password required - your account uses Gmail authentication for security.\n          </AlertDescription>\n        </Alert>\n\n        {/* Sign Up Link */}\n        <div className=\"text-center\">\n          <p className=\"text-sm text-gray-600\">\n            Don't have an account?{\" \"}\n            <Button\n              variant=\"link\"\n              className=\"p-0 h-auto text-blue-600 hover:text-blue-800\"\n              onClick={() => setLocation(\"/setup\")}\n              data-testid=\"link-signup\"\n            >\n              Sign up here\n            </Button>\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":5379},"client/src/pages/checkout.tsx":{"content":"import { useStripe, Elements, PaymentElement, useElements } from '@stripe/react-stripe-js';\nimport { loadStripe } from '@stripe/stripe-js';\nimport { useEffect, useState } from 'react';\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { CreditCard, ArrowLeft } from \"lucide-react\";\nimport { useLocation } from 'wouter';\n\n// Make sure to call `loadStripe` outside of a component's render to avoid\n// recreating the `Stripe` object on every render.\nif (!import.meta.env.VITE_STRIPE_PUBLIC_KEY) {\n  throw new Error('Missing required Stripe key: VITE_STRIPE_PUBLIC_KEY');\n}\nconst stripePromise = loadStripe(import.meta.env.VITE_STRIPE_PUBLIC_KEY);\n\nconst CheckoutForm = () => {\n  const stripe = useStripe();\n  const elements = useElements();\n  const { toast } = useToast();\n  const [, setLocation] = useLocation();\n  const [isLoading, setIsLoading] = useState(false);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsLoading(true);\n\n    if (!stripe || !elements) {\n      setIsLoading(false);\n      return;\n    }\n\n    const { error } = await stripe.confirmPayment({\n      elements,\n      confirmParams: {\n        return_url: window.location.origin + '/dashboard',\n      },\n    });\n\n    if (error) {\n      toast({\n        title: \"Payment Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    } else {\n      toast({\n        title: \"Payment Successful\",\n        description: \"Thank you for your donation! Email access has been granted.\",\n      });\n      setLocation('/dashboard');\n    }\n    setIsLoading(false);\n  }\n\n  return (\n    <Card className=\"w-full max-w-md mx-auto\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center space-x-2\">\n          <CreditCard className=\"h-5 w-5\" />\n          <span>Complete Your Donation</span>\n        </CardTitle>\n      </CardHeader>\n      <CardContent>\n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          <div className=\"p-4 bg-blue-50 rounded-lg\">\n            <h3 className=\"font-medium text-blue-900 mb-2\">Email Access Donation</h3>\n            <p className=\"text-sm text-blue-700\">\n              Your $1.00 donation grants permanent access to send emails to this inbox.\n              Future emails will bypass the filtering system.\n            </p>\n          </div>\n          \n          <PaymentElement />\n          \n          <div className=\"flex space-x-3\">\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              onClick={() => setLocation('/dashboard')}\n              className=\"flex-1\"\n              data-testid=\"button-back\"\n            >\n              <ArrowLeft className=\"h-4 w-4 mr-2\" />\n              Back\n            </Button>\n            <Button\n              type=\"submit\"\n              disabled={!stripe || !elements || isLoading}\n              className=\"flex-1\"\n              data-testid=\"button-complete-payment\"\n            >\n              {isLoading ? 'Processing...' : 'Complete Payment'}\n            </Button>\n          </div>\n        </form>\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default function Checkout() {\n  const [clientSecret, setClientSecret] = useState(\"\");\n  const [, setLocation] = useLocation();\n\n  useEffect(() => {\n    // Create PaymentIntent for testing purposes (this would normally be triggered by an email)\n    fetch(\"/api/create-payment-intent\", {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({ \n        amount: 1.00, \n        senderEmail: \"test@example.com\",\n        pendingEmailId: \"test-id\"\n      }),\n    })\n      .then((res) => res.json())\n      .then((data) => {\n        if (data.clientSecret) {\n          setClientSecret(data.clientSecret);\n        } else {\n          console.error('Failed to create payment intent:', data.message);\n          setLocation('/dashboard');\n        }\n      })\n      .catch((error) => {\n        console.error('Error creating payment intent:', error);\n        setLocation('/dashboard');\n      });\n  }, [setLocation]);\n\n  if (!clientSecret) {\n    return (\n      <div className=\"h-screen flex items-center justify-center\">\n        <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" aria-label=\"Loading\"/>\n      </div>\n    );\n  }\n\n  // Make SURE to wrap the form in <Elements> which provides the stripe context.\n  return (\n    <div className=\"min-h-screen bg-gray-50 flex items-center justify-center p-4\">\n      <Elements stripe={stripePromise} options={{ clientSecret }}>\n        <CheckoutForm />\n      </Elements>\n    </div>\n  );\n}","size_bytes":4734},"server/services/ai-service.ts":{"content":"import OpenAI from \"openai\";\n\nexport class AIService {\n  private openai: OpenAI;\n\n  constructor() {\n    if (!process.env.OPENAI_API_KEY) {\n      throw new Error('OpenAI API key not configured');\n    }\n    this.openai = new OpenAI({\n      apiKey: process.env.OPENAI_API_KEY,\n    });\n  }\n\n  async generateContextualAutoReply(\n    senderEmail: string,\n    recipientEmail: string,\n    subject: string,\n    emailContent: string,\n    charityName: string,\n    paymentLink: string\n  ): Promise<string> {\n    try {\n      const prompt = `You are generating a personalized auto-reply for an email filtering charity system called \"${charityName}\".\n\nSENDER'S ORIGINAL MESSAGE:\nFrom: ${senderEmail}\nSubject: ${subject}\nMessage: ${emailContent}\n\nYOUR TASK: Create a warm, personalized response that:\n1. DIRECTLY acknowledges what they wrote about (their specific business/request/topic)\n2. Shows genuine interest in their message/business/proposal\n3. Explains the filtering system as a way to support charity while managing messages\n4. Makes the $1 donation feel meaningful for the cause\n5. Expresses anticipation to continue the conversation after donation\n\nTONE: Friendly, appreciative, and charitable-minded. Make it feel like a real person responding who cares about both the sender's message AND the charitable cause.\n\nSTRUCTURE:\n- Paragraph 1: Acknowledge their specific message/business/request with genuine interest\n- Paragraph 2: Explain the filtering system in a positive, charity-focused way\n- Paragraph 3: Payment instructions and anticipation to continue discussion\n\nEXAMPLES OF GOOD RESPONSES:\n\"Hi [Name], Thanks for reaching out about [specific topic]. [Relevant comment about their business/request]. This inbox uses a filtering system to manage incoming messages. We humbly request a small donation of $1 to ${charityName}. Small donations like yours go a long way to help people in need. Any donation automatically puts this email in our priority inbox. Look forward to [continuing discussion about their topic]. Thanks for your support.\"\n\nMake it sound natural and conversational, not corporate. The person should feel valued.\n\nPayment link: ${paymentLink}\n\nGenerate only the email body (no subject):`;\n\n      const response = await this.openai.chat.completions.create({\n        model: \"gpt-4o-mini\", // using the cheaper mini model for cost efficiency\n        messages: [\n          {\n            role: \"system\",\n            content: \"You are an empathetic email assistant creating personalized charity donation requests. Your responses should feel genuine, warm, and human - never robotic or corporate. Always acknowledge the sender's specific message and show real interest in their business or request while seamlessly incorporating the donation appeal.\"\n          },\n          {\n            role: \"user\",\n            content: prompt\n          }\n        ],\n        max_tokens: 300,\n        temperature: 0.8,\n      });\n\n      return response.choices[0].message.content || this.getFallbackTemplate(senderEmail, charityName, paymentLink);\n    } catch (error) {\n      console.error('Error generating AI auto-reply:', error);\n      // Fallback to template if AI fails\n      return this.getFallbackTemplate(senderEmail, charityName, paymentLink);\n    }\n  }\n\n  private getFallbackTemplate(senderEmail: string, charityName: string, paymentLink: string): string {\n    return `Thank you for reaching out! This inbox uses a filtering system to manage incoming messages and support charitable causes.\n\nTo ensure your message reaches our priority inbox, we humbly request a small $1 donation to ${charityName}. These small donations make a big difference and help us support those in need.\n\nPlease complete your donation here: ${paymentLink}\n\nOnce processed, your email will be moved to our priority inbox and you'll be added to our trusted contacts for future messages. We look forward to connecting with you!\n\nThank you for your support!`;\n  }\n\n  async analyzeEmailContent(subject: string, snippet: string): Promise<{\n    intent: string;\n    category: string;\n    urgency: 'low' | 'medium' | 'high';\n    businessRelated: boolean;\n  }> {\n    try {\n      const prompt = `Analyze this email and provide a JSON response with the following structure:\n{\n  \"intent\": \"brief description of what the sender wants or is asking for\",\n  \"category\": \"business/personal/promotional/support/other\",\n  \"urgency\": \"low/medium/high\",\n  \"businessRelated\": true/false\n}\n\nEMAIL TO ANALYZE:\nSubject: ${subject}\nContent: ${snippet}\n\nRespond with only valid JSON:`;\n\n      const response = await this.openai.chat.completions.create({\n        model: \"gpt-4o-mini\", // using the cheaper mini model for cost efficiency\n        messages: [\n          {\n            role: \"system\",\n            content: \"You are an email analysis expert. Analyze emails and provide structured JSON responses about their intent, category, urgency, and business relevance.\"\n          },\n          {\n            role: \"user\",\n            content: prompt\n          }\n        ],\n        response_format: { type: \"json_object\" },\n        max_tokens: 150,\n        temperature: 0.3,\n      });\n\n      const analysis = JSON.parse(response.choices[0].message.content || '{}');\n      return {\n        intent: analysis.intent || 'General inquiry',\n        category: analysis.category || 'other',\n        urgency: analysis.urgency || 'low',\n        businessRelated: analysis.businessRelated || false\n      };\n    } catch (error) {\n      console.error('Error analyzing email content:', error);\n      // Fallback analysis\n      return {\n        intent: 'General inquiry',\n        category: 'other',\n        urgency: 'low',\n        businessRelated: false\n      };\n    }\n  }\n}","size_bytes":5707},"OPENAI_SETUP_INSTRUCTIONS.md":{"content":"# OpenAI API Setup Instructions\n\n## Issue: \"Insufficient Quota\" Error\n\nYou're seeing this error even though you have $5 budget because OpenAI requires additional setup for API access.\n\n## Steps to Fix:\n\n### 1. Add Payment Method\n- Go to https://platform.openai.com/account/billing/overview\n- Click \"Add payment method\"\n- Add a valid credit/debit card\n- This enables API access even if you have free credits\n\n### 2. Check API Plan\n- Go to https://platform.openai.com/account/billing/overview\n- Ensure you're on a \"Pay-as-you-go\" plan, not just free trial\n- Free trial credits often don't work for API calls\n\n### 3. Verify API Key\n- Go to https://platform.openai.com/api-keys\n- Ensure your API key is from a project with billing enabled\n- If needed, create a new API key from the correct project\n\n### 4. Alternative: Use GPT-4o-mini\nIf you want to test with minimal costs, I can switch the system to use GPT-4o-mini which is much cheaper ($0.00015 per 1K tokens vs $0.005 for GPT-4o).\n\n### 5. Test Once Fixed\nOnce you've added payment method, the AI responses should work immediately and generate personalized responses like:\n\n\"Hi Bob, Thanks for reaching out about refrigerators and appliances for food pantries. Equipment like yours is exactly what we need to help serve our community better. This inbox uses a filtering system to support charitable causes - we request a small $1 donation to Email Guardian. These donations help us continue our food pantry work and support those in need. Please complete your donation here: [link]. Once processed, your email will go straight to our priority inbox and we'd love to discuss how your appliances can help us serve more families. Thanks for your support!\"\n\n## Current Status\n- AI system is fully implemented and working\n- Falling back to improved template responses until OpenAI access is restored\n- All code is ready for immediate AI responses once billing is configured","size_bytes":1919},"server/services/email-processor-old.ts":{"content":"import { storage } from '../storage';\nimport { gmailService } from './gmail';\nimport { AIService } from './ai-service';\nimport type { User } from '@shared/schema';\n\nexport class EmailProcessor {\n  private aiService: AIService;\n\n  constructor() {\n    this.aiService = new AIService();\n  }\n\n  async processNewEmails(user: User): Promise<void> {\n    if (!user.gmailToken) {\n      throw new Error('User does not have Gmail token');\n    }\n\n    try {\n      // Calculate time range based on last check and current interval\n      const intervalMinutes = parseFloat(user.emailCheckInterval || \"1.0\");\n      const lastCheckTime = user.lastEmailCheck ? new Date(user.lastEmailCheck) : new Date(Date.now() - 24 * 60 * 60 * 1000); // Default to 24h ago if never checked\n      \n      // Format date for Gmail search (YYYY/MM/DD format)\n      const after = lastCheckTime.toISOString().split('T')[0].replace(/-/g, '/');\n      \n      // Get emails from the last check time, including unread and already read emails that might have been missed\n      // Exclude sent emails and emails from the user's own address to prevent processing auto-replies\n      const query = `after:${after} -label:spam -from:${user.email} -in:sent`;\n      const messages = await gmailService.getMessages(\n        user.gmailToken,\n        query,\n        50 // Increased limit to catch more emails during busy periods\n      );\n\n      console.log(`Found ${messages.length} messages since ${after} for user ${user.email}`);\n\n      for (const message of messages) {\n        if (!message.id) continue;\n        \n        await this.processMessage(user, message.id);\n      }\n    } catch (error: any) {\n      if (error.code === 401) {\n        // Token expired, try to refresh\n        if (user.gmailRefreshToken) {\n          const newTokens = await gmailService.refreshAccessToken(user.gmailRefreshToken);\n          if (newTokens.access_token) {\n            await storage.updateUserGmailTokens(user.id, newTokens.access_token, user.gmailRefreshToken);\n            // Retry processing\n            return this.processNewEmails(user);\n          }\n        }\n      }\n      throw error;\n    }\n  }\n\n  private async processMessage(user: User, messageId: string) {\n    const message = await gmailService.getMessage(user.gmailToken!, messageId);\n    \n    if (!message.payload?.headers) return;\n\n    const headers = message.payload.headers;\n    const fromHeader = gmailService.getHeaderValue(headers, 'From');\n    const senderEmail = gmailService.extractEmailAddress(fromHeader);\n    const subject = gmailService.getHeaderValue(headers, 'Subject');\n    const snippet = message.snippet || '';\n\n    console.log(`Processing email from: ${senderEmail}, subject: ${subject}`);\n\n    // Skip auto-reply emails from the system itself\n    if (senderEmail === user.email) {\n      console.log(`Skipping email from user's own email address: ${senderEmail}`);\n      return;\n    }\n\n    // Skip emails that are replies to auto-reply messages (containing \"Email Access Request\")\n    if (subject.includes('Email Access Request') || \n        subject.includes('Re: Re:') || \n        subject.match(/^Re:\\s+.*\\s+-\\s+Email Access Request/)) {\n      console.log(`Skipping auto-reply or duplicate reply: ${subject}`);\n      return;\n    }\n\n    // Skip emails with mailer-daemon or no-reply addresses\n    if (senderEmail.includes('mailer-daemon') || \n        senderEmail.includes('no-reply') || \n        senderEmail.includes('noreply') ||\n        senderEmail.includes('daemon@')) {\n      console.log(`Skipping system/automated email from: ${senderEmail}`);\n      return;\n    }\n\n    // Check if sender is whitelisted\n    const isWhitelisted = await storage.isEmailWhitelisted(user.id, senderEmail);\n    \n    if (isWhitelisted) {\n      console.log(`Email from ${senderEmail} is whitelisted, keeping in inbox`);\n      // Email is from known contact, ensure it's in inbox\n      await gmailService.moveToInbox(user.gmailToken!, messageId);\n      return;\n    }\n\n    // Check if we've already processed this email\n    const existingPendingEmail = await storage.getPendingEmailByGmailId(user.id, messageId);\n    if (existingPendingEmail) {\n      console.log(`Email from ${senderEmail} already processed`);\n      return; // Already processed\n    }\n\n    console.log(`Filtering email from unknown sender: ${senderEmail}`);\n\n    // Create pending email record\n    const pendingEmail = await storage.createPendingEmail({\n      userId: user.id,\n      gmailMessageId: messageId,\n      sender: senderEmail,\n      subject,\n      snippet,\n      receivedAt: new Date(parseInt(message.internalDate || '0')),\n      status: 'pending'\n    });\n\n    // Update pending email status\n    await storage.updatePendingEmailDonationLink(pendingEmail.id, 'manual-request');\n\n    // Add label to Gmail message\n    const labels = await gmailService.getLabels(user.gmailToken!);\n    const pendingLabel = labels.find(l => l.name === 'Email Guardian/Pending Donation');\n    \n    if (pendingLabel?.id) {\n      await gmailService.addLabel(user.gmailToken!, messageId, pendingLabel.id);\n    }\n\n    // Create dynamic Stripe payment link for the donation\n    try {\n      const paymentResponse = await fetch('http://localhost:5000/api/create-dynamic-payment-link', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          targetEmail: user.email,\n          senderEmail,\n          charityName: user.charityName || 'Email Guardian',\n          amount: 1.00 // $1 donation\n        })\n      });\n      \n      const paymentData = await paymentResponse.json();\n      \n      if (paymentData.paymentLink) {\n        // Update pending email with payment link\n        await storage.updatePendingEmailDonationLink(pendingEmail.id, paymentData.paymentLinkId);\n        \n        // Send auto-reply with donation request (AI or template based)\n        await this.sendDonationRequest(user, senderEmail, subject, snippet, paymentData.paymentLink);\n      } else {\n        console.error('Failed to create dynamic payment link:', paymentData.message);\n        // Fallback to regular payment link\n        const fallbackResponse = await fetch('http://localhost:5000/api/create-payment-link', {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({\n            amount: 1.00,\n            senderEmail,\n            pendingEmailId: pendingEmail.id,\n            userId: user.id\n          })\n        });\n        \n        const fallbackData = await fallbackResponse.json();\n        if (fallbackData.paymentUrl) {\n          await storage.updatePendingEmailDonationLink(pendingEmail.id, fallbackData.paymentLinkId);\n          await this.sendDonationRequest(user, senderEmail, subject, snippet, fallbackData.paymentUrl);\n        } else {\n          await this.sendDonationRequest(user, senderEmail, subject, snippet, 'Please contact us for payment instructions.');\n        }\n      }\n    } catch (error: any) {\n      console.error('Error creating payment link:', error.message);\n      // Fallback to manual donation request\n      await this.sendDonationRequest(user, senderEmail, subject, snippet, 'Please contact us for payment instructions.');\n    }\n    \n    // Remove from inbox since it's now pending donation\n    await gmailService.removeFromInbox(user.gmailToken!, messageId);\n\n    // Update stats\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n    \n    const stats = await storage.getEmailStats(user.id, today);\n    const currentFiltered = stats ? parseInt(stats.emailsFiltered || \"0\") : 0;\n    \n    await storage.createOrUpdateEmailStats(user.id, today, {\n      emailsFiltered: (currentFiltered + 1).toString()\n    });\n\n    console.log(`Successfully filtered email from ${senderEmail} and sent auto-reply`);\n  }\n\n  private async sendDonationRequest(user: User, senderEmail: string, originalSubject: string, emailContent: string, donationUrl: string) {\n    const subject = `Re: ${originalSubject} - Email Access Request`;\n    const charityName = user.charityName || 'Email Guardian';\n    \n    let body: string;\n    \n    // Use AI-generated response if enabled, otherwise use template\n    if (user.useAiResponses) {\n      try {\n        console.log(`Generating AI response for email from ${senderEmail}`);\n        body = await this.aiService.generateContextualAutoReply(\n          senderEmail,\n          user.email,\n          originalSubject,\n          emailContent,\n          charityName,\n          donationUrl\n        );\n      } catch (error) {\n        console.error('Failed to generate AI response, falling back to template:', error);\n        body = this.getTemplateResponse(charityName, donationUrl);\n      }\n    } else {\n      body = this.getTemplateResponse(charityName, donationUrl);\n    }\n    \n    await gmailService.sendEmail(user.gmailToken!, senderEmail, subject, body);\n  }\n\n  private getTemplateResponse(charityName: string, donationUrl: string): string {\n    return `\nHello,\n\nThank you for your email. To help manage my inbox and reduce spam, I use an email filtering system that requires a small $1 donation for unknown senders to ensure your message reaches me.\n\nThis one-time payment to ${charityName} grants you permanent access to my inbox for future emails.\n\nTo complete your donation and have your email delivered:\n\nComplete Your $1 Donation Here: ${donationUrl}\n\nOnce your payment is confirmed:\n- Your original email will be delivered to my inbox\n- You'll be added to my known contacts list for future emails\n- All future emails from you will bypass the filtering system\n\nThis filtering system helps reduce spam while ensuring legitimate emails reach me. Thank you for understanding and for supporting ${charityName}!\n\nBest regards,\nEmail Guardian System\n    `.trim();\n  }\n\n  async processDonationComplete(senderEmail: string, userId: string) {\n    // Manual donation processing (for when payments are confirmed manually)\n    \n    // Add sender to contacts (whitelist them)\n    const existingContact = await storage.getContactByEmail(userId, senderEmail);\n    if (!existingContact) {\n      await storage.createContact({\n        userId: userId,\n        email: senderEmail,\n        isWhitelisted: true\n      });\n    }\n\n    // Get user for Gmail operations\n    const user = await storage.getUser(userId);\n    if (!user?.gmailToken) {\n      throw new Error('User Gmail token not found');\n    }\n\n    // Find pending emails from this sender\n    const pendingEmails = await storage.getPendingEmails(userId);\n    const senderPendingEmails = pendingEmails.filter(e => e.sender === senderEmail);\n\n    // Move all emails from this sender to inbox\n    for (const pendingEmail of senderPendingEmails) {\n      await gmailService.moveToInbox(user.gmailToken, pendingEmail.gmailMessageId);\n      \n      const labels = await gmailService.getLabels(user.gmailToken);\n      const knownContactsLabel = labels.find(l => l.name === 'Email Guardian/Known Contacts');\n      const pendingLabel = labels.find(l => l.name === 'Email Guardian/Pending Donation');\n      \n      if (knownContactsLabel?.id) {\n        await gmailService.addLabel(user.gmailToken, pendingEmail.gmailMessageId, knownContactsLabel.id);\n      }\n      \n      if (pendingLabel?.id) {\n        await gmailService.removeLabel(user.gmailToken, pendingEmail.gmailMessageId, pendingLabel.id);\n      }\n\n      // Update pending email status\n      await storage.updatePendingEmailStatus(pendingEmail.id, 'paid');\n    }\n\n    // Update stats\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n    \n    const stats = await storage.getEmailStats(userId, today);\n    const currentDonations = stats ? parseFloat(stats.donationsReceived || \"0\") : 0;\n    \n    await storage.createOrUpdateEmailStats(userId, today, {\n      donationsReceived: (currentDonations + 1.00).toString()\n    });\n  }\n}\n\nexport const emailProcessor = new EmailProcessor();","size_bytes":11884},"client/src/pages/business-website.tsx":{"content":"import { Shield, Mail, DollarSign, CheckCircle, Users, Clock, Zap } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\n\nexport default function BusinessWebsite() {\n  return (\n    <div className=\"min-h-screen bg-white\">\n      {/* Header */}\n      <header className=\"bg-gray-900 text-white\">\n        <div className=\"max-w-6xl mx-auto px-4 py-6\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-3\">\n              <Shield className=\"h-8 w-8 text-blue-400\" />\n              <h1 className=\"text-2xl font-bold\">Email Guardian</h1>\n            </div>\n            <nav className=\"hidden md:flex space-x-6\">\n              <a href=\"#features\" className=\"hover:text-blue-400 transition-colors\">Features</a>\n              <a href=\"#pricing\" className=\"hover:text-blue-400 transition-colors\">Pricing</a>\n              <a href=\"#how-it-works\" className=\"hover:text-blue-400 transition-colors\">How It Works</a>\n              <a href=\"#contact\" className=\"hover:text-blue-400 transition-colors\">Contact</a>\n            </nav>\n          </div>\n        </div>\n      </header>\n\n      {/* Hero Section */}\n      <section className=\"bg-gradient-to-br from-blue-50 to-indigo-100 py-20\">\n        <div className=\"max-w-6xl mx-auto px-4 text-center\">\n          <h2 className=\"text-5xl font-bold text-gray-900 mb-6\">\n            Intelligent Email Filtering with Donation-Based Access\n          </h2>\n          <p className=\"text-xl text-gray-600 mb-8 max-w-3xl mx-auto\">\n            Email Guardian is a professional email management service that reduces spam and unwanted emails \n            by requiring unknown senders to make a small donation before their messages reach your inbox. \n            Legitimate contacts are automatically whitelisted for seamless communication.\n          </p>\n          <div className=\"flex justify-center space-x-4\">\n            <Button size=\"lg\" className=\"bg-blue-600 hover:bg-blue-700\">\n              Get Started Today\n            </Button>\n            <Button size=\"lg\" variant=\"outline\">\n              Watch Demo\n            </Button>\n          </div>\n        </div>\n      </section>\n\n      {/* Features Section */}\n      <section id=\"features\" className=\"py-20 bg-white\">\n        <div className=\"max-w-6xl mx-auto px-4\">\n          <h2 className=\"text-3xl font-bold text-center text-gray-900 mb-12\">\n            Powerful Email Management Features\n          </h2>\n          <div className=\"grid md:grid-cols-3 gap-8\">\n            <Card>\n              <CardHeader>\n                <Mail className=\"h-12 w-12 text-blue-600 mb-4\" />\n                <CardTitle>Automated Filtering</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-gray-600\">\n                  Automatically filters emails from unknown senders while keeping messages \n                  from known contacts in your inbox. Configurable check intervals from \n                  30 seconds to 1 hour.\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <DollarSign className=\"h-12 w-12 text-green-600 mb-4\" />\n                <CardTitle>Donation-Based Access</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-gray-600\">\n                  Unknown senders make a small $1 donation to access your inbox. \n                  This creates a barrier for spam while allowing legitimate communication. \n                  Payments processed securely through Stripe.\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <Shield className=\"h-12 w-12 text-purple-600 mb-4\" />\n                <CardTitle>Gmail Integration</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-gray-600\">\n                  Seamlessly integrates with your existing Gmail account using secure \n                  OAuth authentication. No need to change email providers or learn \n                  new interfaces.\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <Users className=\"h-12 w-12 text-orange-600 mb-4\" />\n                <CardTitle>Contact Management</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-gray-600\">\n                  Automatically whitelist donors for future emails. Manually manage \n                  your known contacts list. Once someone donates, they have permanent \n                  access to your inbox.\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <Clock className=\"h-12 w-12 text-red-600 mb-4\" />\n                <CardTitle>Real-Time Processing</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-gray-600\">\n                  Emails are processed in real-time with configurable intervals. \n                  Dashboard provides live statistics on filtered emails, pending \n                  donations, and contact activity.\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <Zap className=\"h-12 w-12 text-yellow-600 mb-4\" />\n                <CardTitle>Automated Responses</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-gray-600\">\n                  Sends professional auto-reply messages with payment instructions \n                  to unknown senders. Customizable templates and messaging to match \n                  your communication style.\n                </p>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </section>\n\n      {/* How It Works */}\n      <section id=\"how-it-works\" className=\"py-20 bg-gray-50\">\n        <div className=\"max-w-6xl mx-auto px-4\">\n          <h2 className=\"text-3xl font-bold text-center text-gray-900 mb-12\">\n            How Email Guardian Works\n          </h2>\n          <div className=\"grid md:grid-cols-4 gap-8\">\n            <div className=\"text-center\">\n              <div className=\"bg-blue-600 text-white rounded-full w-12 h-12 flex items-center justify-center mx-auto mb-4 text-xl font-bold\">\n                1\n              </div>\n              <h3 className=\"font-semibold mb-2\">Email Received</h3>\n              <p className=\"text-gray-600 text-sm\">\n                Unknown sender emails your Gmail address\n              </p>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"bg-blue-600 text-white rounded-full w-12 h-12 flex items-center justify-center mx-auto mb-4 text-xl font-bold\">\n                2\n              </div>\n              <h3 className=\"font-semibold mb-2\">Automatic Filter</h3>\n              <p className=\"text-gray-600 text-sm\">\n                Email Guardian intercepts and holds the message\n              </p>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"bg-blue-600 text-white rounded-full w-12 h-12 flex items-center justify-center mx-auto mb-4 text-xl font-bold\">\n                3\n              </div>\n              <h3 className=\"font-semibold mb-2\">Donation Request</h3>\n              <p className=\"text-gray-600 text-sm\">\n                Auto-reply sent with secure payment link\n              </p>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"bg-blue-600 text-white rounded-full w-12 h-12 flex items-center justify-center mx-auto mb-4 text-xl font-bold\">\n                4\n              </div>\n              <h3 className=\"font-semibold mb-2\">Access Granted</h3>\n              <p className=\"text-gray-600 text-sm\">\n                Payment processed, email delivered, sender whitelisted\n              </p>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Pricing */}\n      <section id=\"pricing\" className=\"py-20 bg-white\">\n        <div className=\"max-w-4xl mx-auto px-4 text-center\">\n          <h2 className=\"text-3xl font-bold text-gray-900 mb-12\">\n            Simple, Transparent Pricing\n          </h2>\n          <Card className=\"max-w-md mx-auto\">\n            <CardHeader>\n              <CardTitle className=\"text-2xl\">Email Guardian Service</CardTitle>\n              <div className=\"text-4xl font-bold text-blue-600\">Free</div>\n              <p className=\"text-gray-600\">for recipients</p>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <div className=\"flex items-center\">\n                  <CheckCircle className=\"h-5 w-5 text-green-600 mr-2\" />\n                  <span>Unlimited email filtering</span>\n                </div>\n                <div className=\"flex items-center\">\n                  <CheckCircle className=\"h-5 w-5 text-green-600 mr-2\" />\n                  <span>Gmail integration</span>\n                </div>\n                <div className=\"flex items-center\">\n                  <CheckCircle className=\"h-5 w-5 text-green-600 mr-2\" />\n                  <span>Contact management</span>\n                </div>\n                <div className=\"flex items-center\">\n                  <CheckCircle className=\"h-5 w-5 text-green-600 mr-2\" />\n                  <span>Real-time processing</span>\n                </div>\n                <div className=\"flex items-center\">\n                  <CheckCircle className=\"h-5 w-5 text-green-600 mr-2\" />\n                  <span>Secure payment processing</span>\n                </div>\n              </div>\n              <div className=\"pt-4 border-t\">\n                <p className=\"text-sm text-gray-600\">\n                  <strong>Senders pay $1</strong> to access your inbox. This amount goes directly to you, \n                  helping support your time and attention while reducing spam.\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </section>\n\n      {/* Business Information */}\n      <section className=\"py-20 bg-gray-50\">\n        <div className=\"max-w-4xl mx-auto px-4\">\n          <h2 className=\"text-3xl font-bold text-center text-gray-900 mb-12\">\n            About Email Guardian\n          </h2>\n          <div className=\"grid md:grid-cols-2 gap-12\">\n            <div>\n              <h3 className=\"text-xl font-semibold mb-4\">Our Service</h3>\n              <p className=\"text-gray-600 mb-4\">\n                Email Guardian provides intelligent email filtering technology that helps individuals \n                and professionals manage their inbox more effectively. Our service integrates with \n                Gmail to automatically filter unwanted emails while ensuring legitimate communication \n                reaches its destination.\n              </p>\n              <p className=\"text-gray-600\">\n                We use a donation-based model where unknown senders contribute a small amount to \n                access your inbox, creating a natural barrier against spam while supporting the \n                recipient's time and attention.\n              </p>\n            </div>\n            <div>\n              <h3 className=\"text-xl font-semibold mb-4\">Business Model</h3>\n              <p className=\"text-gray-600 mb-4\">\n                Our revenue model is transparent: we provide the filtering technology for free to \n                recipients, while unknown senders pay a small access fee that goes directly to the \n                recipient. Payment processing is handled securely through Stripe.\n              </p>\n              <ul className=\"text-gray-600 space-y-2\">\n                <li>‚Ä¢ Service is free for email recipients</li>\n                <li>‚Ä¢ $1 access fee paid by unknown senders</li>\n                <li>‚Ä¢ Secure payment processing via Stripe</li>\n                <li>‚Ä¢ No hidden fees or subscription costs</li>\n              </ul>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Contact Section */}\n      <section id=\"contact\" className=\"py-20 bg-white\">\n        <div className=\"max-w-4xl mx-auto px-4 text-center\">\n          <h2 className=\"text-3xl font-bold text-gray-900 mb-8\">\n            Get in Touch\n          </h2>\n          <p className=\"text-xl text-gray-600 mb-8\">\n            Ready to take control of your inbox? Contact us to learn more about Email Guardian.\n          </p>\n          <div className=\"grid md:grid-cols-3 gap-8 text-left\">\n            <Card>\n              <CardContent className=\"pt-6\">\n                <h3 className=\"font-semibold mb-2\">Technical Support</h3>\n                <p className=\"text-gray-600 text-sm\">\n                  For technical questions, integration support, or troubleshooting assistance.\n                </p>\n                <p className=\"text-blue-600 mt-2\">support@emailguardian.com</p>\n              </CardContent>\n            </Card>\n            <Card>\n              <CardContent className=\"pt-6\">\n                <h3 className=\"font-semibold mb-2\">Business Inquiries</h3>\n                <p className=\"text-gray-600 text-sm\">\n                  For partnership opportunities, enterprise solutions, or general business questions.\n                </p>\n                <p className=\"text-blue-600 mt-2\">business@emailguardian.com</p>\n              </CardContent>\n            </Card>\n            <Card>\n              <CardContent className=\"pt-6\">\n                <h3 className=\"font-semibold mb-2\">Payment Issues</h3>\n                <p className=\"text-gray-600 text-sm\">\n                  For payment-related questions, refunds, or billing support.\n                </p>\n                <p className=\"text-blue-600 mt-2\">billing@emailguardian.com</p>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </section>\n\n      {/* Footer */}\n      <footer className=\"bg-gray-900 text-white py-12\">\n        <div className=\"max-w-6xl mx-auto px-4\">\n          <div className=\"grid md:grid-cols-4 gap-8\">\n            <div>\n              <div className=\"flex items-center space-x-2 mb-4\">\n                <Shield className=\"h-6 w-6 text-blue-400\" />\n                <span className=\"font-bold\">Email Guardian</span>\n              </div>\n              <p className=\"text-gray-400 text-sm\">\n                Intelligent email filtering with donation-based access control.\n              </p>\n            </div>\n            <div>\n              <h4 className=\"font-semibold mb-4\">Service</h4>\n              <ul className=\"space-y-2 text-sm text-gray-400\">\n                <li>How It Works</li>\n                <li>Features</li>\n                <li>Pricing</li>\n                <li>Security</li>\n              </ul>\n            </div>\n            <div>\n              <h4 className=\"font-semibold mb-4\">Support</h4>\n              <ul className=\"space-y-2 text-sm text-gray-400\">\n                <li>Documentation</li>\n                <li>API Reference</li>\n                <li>Contact Support</li>\n                <li>Status Page</li>\n              </ul>\n            </div>\n            <div>\n              <h4 className=\"font-semibold mb-4\">Legal</h4>\n              <ul className=\"space-y-2 text-sm text-gray-400\">\n                <li>Privacy Policy</li>\n                <li>Terms of Service</li>\n                <li>Cookie Policy</li>\n                <li>GDPR Compliance</li>\n              </ul>\n            </div>\n          </div>\n          <div className=\"border-t border-gray-800 mt-8 pt-8 text-center\">\n            <p className=\"text-gray-400 text-sm\">\n              ¬© 2025 Email Guardian. All rights reserved. | \n              Business Registration: Email Guardian LLC | \n              Payment Processing: Stripe Inc.\n            </p>\n          </div>\n        </div>\n      </footer>\n    </div>\n  );\n}","size_bytes":16083},"client/src/pages/payment-success.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { CheckCircle, ArrowLeft } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\n\nexport default function PaymentSuccess() {\n  const [searchParams, setSearchParams] = useState<URLSearchParams>();\n  const [senderEmail, setSenderEmail] = useState(\"\");\n  const [targetEmail, setTargetEmail] = useState(\"\");\n\n  useEffect(() => {\n    const params = new URLSearchParams(window.location.search);\n    setSearchParams(params);\n    setSenderEmail(params.get('sender') || '');\n    setTargetEmail(params.get('target') || '');\n  }, []);\n\n  const handleGoBack = () => {\n    // Redirect to a landing page or close window\n    window.location.href = '/';\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 flex items-center justify-center p-4\">\n      <Card className=\"max-w-md w-full\">\n        <CardHeader className=\"text-center\">\n          <div className=\"mx-auto mb-4 w-16 h-16 bg-green-100 rounded-full flex items-center justify-center\">\n            <CheckCircle className=\"w-8 h-8 text-green-600\" />\n          </div>\n          <CardTitle className=\"text-2xl text-green-700\">Payment Successful!</CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4 text-center\">\n          <p className=\"text-gray-600\">\n            Thank you for your donation! Your payment has been processed successfully.\n          </p>\n          \n          {senderEmail && targetEmail && (\n            <div className=\"bg-blue-50 p-4 rounded-lg text-sm\">\n              <p className=\"font-medium text-blue-800\">Email Access Granted</p>\n              <p className=\"text-blue-600 mt-1\">\n                <span className=\"font-medium\">{senderEmail}</span> now has permanent access to send emails to <span className=\"font-medium\">{targetEmail}</span>\n              </p>\n              <p className=\"text-blue-600 mt-2\">\n                Your original email will be delivered shortly, and you've been added to the recipient's whitelist for future emails.\n              </p>\n            </div>\n          )}\n\n          <div className=\"pt-4\">\n            <Button onClick={handleGoBack} className=\"w-full\" data-testid=\"button-go-back\">\n              <ArrowLeft size={16} className=\"mr-2\" />\n              Continue\n            </Button>\n          </div>\n\n          <p className=\"text-xs text-gray-500 mt-4\">\n            This donation helps support inbox management and reduces spam. Thank you for contributing!\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":2601}}}